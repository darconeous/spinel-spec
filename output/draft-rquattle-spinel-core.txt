



Network Working Group                                     R. Quattlebaum
Internet-Draft                                          J. Woodyatt, Ed.
Intended status: Standards Track                         Nest Labs, Inc.
Expires: May 5, 2018                                    November 1, 2017


 Spinel: A Protocol for Control and Management of Network Co-Processors
                   draft-rquattle-spinel-core-2f476c7

Abstract

   This document specifies the core of the Spinel host-controller
   protocol, which enables a general purpose application processor to
   manage, control, and offload IPv6 network functions to a Network Co-
   Processor (NCP) connected via a simple communication link(such as
   UART, SPI, or USB).

   Spinel was initially designed for use with Thread(R) network co-
   processors, but the core of the protocol is general purpose and
   intended to be easily adapted to other types of low-power IPv6
   networking technologies.

Status of This Memo

   This Internet-Draft is submitted in full conformance with the
   provisions of BCP 78 and BCP 79.

   Internet-Drafts are working documents of the Internet Engineering
   Task Force (IETF).  Note that other groups may also distribute
   working documents as Internet-Drafts.  The list of current Internet-
   Drafts is at http://datatracker.ietf.org/drafts/current/.

   Internet-Drafts are draft documents valid for a maximum of six months
   and may be updated, replaced, or obsoleted by other documents at any
   time.  It is inappropriate to use Internet-Drafts as reference
   material or to cite them other than as "work in progress."

   This Internet-Draft will expire on May 5, 2018.

Copyright Notice

   Copyright (c) 2017 IETF Trust and the persons identified as the
   document authors.  All rights reserved.

   This document is subject to BCP 78 and the IETF Trust's Legal
   Provisions Relating to IETF Documents
   (http://trustee.ietf.org/license-info) in effect on the date of
   publication of this document.  Please review these documents



Quattlebaum & Woodyatt     Expires May 5, 2018                  [Page 1]

Internet-Draft                 Spinel Core                 November 2017


   carefully, as they describe your rights and restrictions with respect
   to this document.  Code Components extracted from this document must
   include Simplified BSD License text as described in Section 4.e of
   the Trust Legal Provisions and are provided without warranty as
   described in the Simplified BSD License.

Table of Contents

   1.  Introduction  . . . . . . . . . . . . . . . . . . . . . . . .   5
     1.1.  Objectives  . . . . . . . . . . . . . . . . . . . . . . .   5
     1.2.  Terminology . . . . . . . . . . . . . . . . . . . . . . .   6
   2.  Data Representation . . . . . . . . . . . . . . . . . . . . .   7
     2.1.  Packed Unsigned Integers  . . . . . . . . . . . . . . . .   7
   3.  Spinel Frames . . . . . . . . . . . . . . . . . . . . . . . .   8
     3.1.  Frame Format  . . . . . . . . . . . . . . . . . . . . . .   9
     3.2.  Header  . . . . . . . . . . . . . . . . . . . . . . . . .   9
       3.2.1.  FLG: Flag . . . . . . . . . . . . . . . . . . . . . .   9
       3.2.2.  NLI: Network Link Identifier  . . . . . . . . . . . .  10
       3.2.3.  TID: Transaction Identifier . . . . . . . . . . . . .  10
     3.3.  Command ID  . . . . . . . . . . . . . . . . . . . . . . .  11
     3.4.  Payload . . . . . . . . . . . . . . . . . . . . . . . . .  11
   4.  Property Overview . . . . . . . . . . . . . . . . . . . . . .  11
     4.1.  Property Operators  . . . . . . . . . . . . . . . . . . .  12
     4.2.  Property Types  . . . . . . . . . . . . . . . . . . . . .  12
       4.2.1.  Single-Value Properties . . . . . . . . . . . . . . .  13
       4.2.2.  Multiple-Value Properties . . . . . . . . . . . . . .  13
       4.2.3.  Stream Properties . . . . . . . . . . . . . . . . . .  14
   5.  Status Codes  . . . . . . . . . . . . . . . . . . . . . . . .  14
     5.1.  Reset Codes . . . . . . . . . . . . . . . . . . . . . . .  18
     5.2.  Status Code Ranges  . . . . . . . . . . . . . . . . . . .  19
     5.3.  How Status is Indicated . . . . . . . . . . . . . . . . .  19
   6.  Commands  . . . . . . . . . . . . . . . . . . . . . . . . . .  20
     6.1.  CMD 0: (AP -> NCP) CMD_NOOP . . . . . . . . . . . . . . .  20
     6.2.  CMD 1: (AP -> NCP) CMD_RESET  . . . . . . . . . . . . . .  21
     6.3.  CMD 2: (AP -> NCP) CMD_PROP_VALUE_GET . . . . . . . . . .  21
     6.4.  CMD 3: (AP -> NCP) CMD_PROP_VALUE_SET . . . . . . . . . .  21
     6.5.  CMD 4: (AP -> NCP) CMD_PROP_VALUE_INSERT  . . . . . . . .  22
     6.6.  CMD 5: (AP -> NCP) CMD_PROP_VALUE_REMOVE  . . . . . . . .  23
     6.7.  CMD 6: (NCP -> AP) CMD_PROP_VALUE_IS  . . . . . . . . . .  23
     6.8.  CMD 7: (NCP -> AP) CMD_PROP_VALUE_INSERTED  . . . . . . .  24
     6.9.  CMD 8: (NCP -> AP) CMD_PROP_VALUE_REMOVED . . . . . . . .  25
     6.10. CMD 18: (AP -> NCP) CMD_PEEK  . . . . . . . . . . . . . .  25
     6.11. CMD 19: (NCP -> AP) CMD_PEEK_RET  . . . . . . . . . . . .  26
     6.12. CMD 20: (AP -> NCP) CMD_POKE  . . . . . . . . . . . . . .  27
     6.13. CMD 21: (AP -> NCP) CMD_PROP_VALUE_MULTI_GET  . . . . . .  27
     6.14. CMD 22: (AP -> NCP) CMD_PROP_VALUE_MULTI_SET  . . . . . .  28
     6.15. CMD 23: (NCP -> AP) CMD_PROP_VALUES_ARE . . . . . . . . .  29
     6.16. CMD 24: (AP -> NCP) CMD_RESET_NLI . . . . . . . . . . . .  30



Quattlebaum & Woodyatt     Expires May 5, 2018                  [Page 2]

Internet-Draft                 Spinel Core                 November 2017


   7.  Capabilities  . . . . . . . . . . . . . . . . . . . . . . . .  30
   8.  Properties  . . . . . . . . . . . . . . . . . . . . . . . . .  31
     8.1.  Command Semantics . . . . . . . . . . . . . . . . . . . .  31
     8.2.  Asynchronous Updates  . . . . . . . . . . . . . . . . . .  32
     8.3.  Property Identifiers  . . . . . . . . . . . . . . . . . .  33
     8.4.  Property Identifier Sections  . . . . . . . . . . . . . .  33
     8.5.  Core Properties . . . . . . . . . . . . . . . . . . . . .  34
       8.5.1.  PROP 0: PROP_LAST_STATUS  . . . . . . . . . . . . . .  34
       8.5.2.  PROP 1: PROP_PROTOCOL_VERSION . . . . . . . . . . . .  34
       8.5.3.  PROP 2: PROP_NCP_VERSION  . . . . . . . . . . . . . .  35
       8.5.4.  PROP 3: PROP_INTERFACE_TYPE . . . . . . . . . . . . .  36
       8.5.5.  PROP 4: PROP_INTERFACE_VENDOR_ID  . . . . . . . . . .  37
       8.5.6.  PROP 5: PROP_CAPS . . . . . . . . . . . . . . . . . .  38
       8.5.7.  PROP 6: PROP_INTERFACE_COUNT  . . . . . . . . . . . .  38
       8.5.8.  PROP 7: PROP_POWER_STATE  . . . . . . . . . . . . . .  39
       8.5.9.  PROP 8: PROP_HWADDR . . . . . . . . . . . . . . . . .  40
       8.5.10. PROP 9: PROP_LOCK . . . . . . . . . . . . . . . . . .  40
       8.5.11. PROP 10: PROP_HOST_POWER_STATE  . . . . . . . . . . .  41
       8.5.12. PROP 4104: PROP_UNSOL_UPDATE_FILTER . . . . . . . . .  42
       8.5.13. PROP 4105: PROP_UNSOL_UPDATE_LIST . . . . . . . . . .  43
     8.6.  Stream Properties . . . . . . . . . . . . . . . . . . . .  44
       8.6.1.  PROP 112: PROP_STREAM_DEBUG . . . . . . . . . . . . .  44
       8.6.2.  PROP 113: PROP_STREAM_RAW . . . . . . . . . . . . . .  44
       8.6.3.  PROP 114: PROP_STREAM_NET . . . . . . . . . . . . . .  45
       8.6.4.  PROP 115: PROP_STREAM_NET_INSECURE  . . . . . . . . .  46
     8.7.  PHY Properties  . . . . . . . . . . . . . . . . . . . . .  46
       8.7.1.  PROP 32: PROP_PHY_ENABLED . . . . . . . . . . . . . .  46
       8.7.2.  PROP 33: PROP_PHY_CHAN  . . . . . . . . . . . . . . .  47
       8.7.3.  PROP 34: PROP_PHY_CHAN_SUPPORTED  . . . . . . . . . .  47
       8.7.4.  PROP 35: PROP_PHY_FREQ  . . . . . . . . . . . . . . .  48
       8.7.5.  PROP 36: PROP_PHY_CCA_THRESHOLD . . . . . . . . . . .  48
       8.7.6.  PROP 37: PROP_PHY_TX_POWER  . . . . . . . . . . . . .  49
       8.7.7.  PROP 38: PROP_PHY_RSSI  . . . . . . . . . . . . . . .  49
       8.7.8.  PROP 39: PROP_PHY_RX_SENSITIVITY  . . . . . . . . . .  50
     8.8.  MAC Properties  . . . . . . . . . . . . . . . . . . . . .  50
       8.8.1.  PROP 48: PROP_MAC_SCAN_STATE  . . . . . . . . . . . .  50
       8.8.2.  PROP 49: PROP_MAC_SCAN_MASK . . . . . . . . . . . . .  51
       8.8.3.  PROP 50: PROP_MAC_SCAN_PERIOD . . . . . . . . . . . .  52
       8.8.4.  PROP 51: PROP_MAC_SCAN_BEACON . . . . . . . . . . . .  52
       8.8.5.  PROP 52: PROP_MAC_15_4_LADDR  . . . . . . . . . . . .  53
       8.8.6.  PROP 53: PROP_MAC_15_4_SADDR  . . . . . . . . . . . .  54
       8.8.7.  PROP 54: PROP_MAC_15_4_PANID  . . . . . . . . . . . .  54
       8.8.8.  PROP 55: PROP_MAC_RAW_STREAM_ENABLED  . . . . . . . .  55
       8.8.9.  PROP 56: PROP_MAC_PROMISCUOUS_MODE  . . . . . . . . .  55
       8.8.10. PROP 57: PROP_MAC_ENERGY_SCAN_RESULT  . . . . . . . .  56
       8.8.11. PROP 58: PROP_MAC_DATA_POLL_PERIOD  . . . . . . . . .  56
       8.8.12. PROP 4864: PROP_MAC_WHITELIST . . . . . . . . . . . .  57
       8.8.13. PROP 4865: PROP_MAC_WHITELIST_ENABLED . . . . . . . .  58



Quattlebaum & Woodyatt     Expires May 5, 2018                  [Page 3]

Internet-Draft                 Spinel Core                 November 2017


       8.8.14. PROP 4870: PROP_MAC_BLACKLIST . . . . . . . . . . . .  58
       8.8.15. PROP 4871: PROP_MAC_BLACKLIST_ENABLED . . . . . . . .  59
       8.8.16. PROP 4867: PROP_MAC_SRC_MATCH_ENABLED . . . . . . . .  59
       8.8.17. PROP 4868: PROP_MAC_SRC_MATCH_SHORT_ADDRESSES . . . .  60
       8.8.18. PROP 4869: PROP_MAC_SRC_MATCH_EXTENDED_ADDRESSES  . .  60
     8.9.  NET Properties  . . . . . . . . . . . . . . . . . . . . .  61
       8.9.1.  PROP 65: PROP_NET_IF_UP . . . . . . . . . . . . . . .  61
       8.9.2.  PROP 66: PROP_NET_STACK_UP  . . . . . . . . . . . . .  61
       8.9.3.  PROP 67: PROP_NET_ROLE  . . . . . . . . . . . . . . .  62
       8.9.4.  PROP 68: PROP_NET_NETWORK_NAME  . . . . . . . . . . .  63
       8.9.5.  PROP 69: PROP_NET_XPANID  . . . . . . . . . . . . . .  64
       8.9.6.  PROP 70: PROP_NET_MASTER_KEY  . . . . . . . . . . . .  64
       8.9.7.  PROP 71: PROP_NET_KEY_SEQUENCE_COUNTER  . . . . . . .  65
       8.9.8.  PROP 72: PROP_NET_PARTITION_ID  . . . . . . . . . . .  66
       8.9.9.  PROP 73: PROP_NET_REQUIRE_JOIN_EXISTING . . . . . . .  66
     8.10. IPv6 Properties . . . . . . . . . . . . . . . . . . . . .  67
       8.10.1.  PROP 96: PROP_IPV6_LL_ADDR . . . . . . . . . . . . .  67
       8.10.2.  PROP 99: PROP_IPV6_ADDR_TABLE  . . . . . . . . . . .  67
       8.10.3.  PROP 101: PROP_IPv6_ICMP_PING_OFFLOAD  . . . . . . .  68
       8.10.4.  PROP 102: PROP_IPV6_MULTICAST_ADDR_TABLE . . . . . .  69
     8.11. RETHINK IPv6 Properties . . . . . . . . . . . . . . . . .  69
       8.11.1.  PROP XXXX: PROP_IPV6_UCAST_ADDRS . . . . . . . . . .  69
       8.11.2.  PROP XXXX: PROP_IPV6_HOST_UCAST_ADDRS  . . . . . . .  70
       8.11.3.  PROP XXXX: PROP_IPV6_ON_LINK_PREFIXES  . . . . . . .  71
       8.11.4.  PROP XXXX: PROP_IPV6_HOST_ON_LINK_PREFIXES . . . . .  72
       8.11.5.  PROP XXXX: PROP_IPV6_MCAST_ADDRS . . . . . . . . . .  73
       8.11.6.  PROP XXXX: PROP_IPV6_HOST_MCAST_ADDRS  . . . . . . .  74
       8.11.7.  PROP XXXX: PROP_IPV6_ROUTES  . . . . . . . . . . . .  75
       8.11.8.  PROP XXXX: PROP_IPV6_HOST_ROUTES . . . . . . . . . .  76
     8.12. Debug Properties  . . . . . . . . . . . . . . . . . . . .  77
       8.12.1.  PROP 16384: PROP_DEBUG_TEST_ASSERT . . . . . . . . .  77
       8.12.2.  PROP 16385: PROP_DEBUG_NCP_LOG_LEVEL . . . . . . . .  78
   9.  Security Considerations . . . . . . . . . . . . . . . . . . .  78
     9.1.  Network Name Normalization  . . . . . . . . . . . . . . .  79
     9.2.  Raw Application Access  . . . . . . . . . . . . . . . . .  79
   10. IANA Considerations . . . . . . . . . . . . . . . . . . . . .  79
   11. References  . . . . . . . . . . . . . . . . . . . . . . . . .  79
     11.1.  Normative References . . . . . . . . . . . . . . . . . .  79
     11.2.  Informative References . . . . . . . . . . . . . . . . .  79
     11.3.  URIs . . . . . . . . . . . . . . . . . . . . . . . . . .  80
   Appendix A.  Example Sessions . . . . . . . . . . . . . . . . . .  80
     A.1.  NCP Initialization  . . . . . . . . . . . . . . . . . . .  80
     A.2.  Attaching to a network  . . . . . . . . . . . . . . . . .  81
     A.3.  Detaching from a network  . . . . . . . . . . . . . . . .  81
     A.4.  Attaching to a saved network  . . . . . . . . . . . . . .  82
     A.5.  NCP Software Reset  . . . . . . . . . . . . . . . . . . .  82
   Appendix B.  Recommended Framing Protocols  . . . . . . . . . . .  82
     B.1.  UART Recommendations  . . . . . . . . . . . . . . . . . .  83



Quattlebaum & Woodyatt     Expires May 5, 2018                  [Page 4]

Internet-Draft                 Spinel Core                 November 2017


       B.1.1.  UART Bit Rate Detection . . . . . . . . . . . . . . .  83
       B.1.2.  HDLC-Lite . . . . . . . . . . . . . . . . . . . . . .  84
     B.2.  SPI Recommendations . . . . . . . . . . . . . . . . . . .  85
       B.2.1.  SPI Framing Protocol  . . . . . . . . . . . . . . . .  86
     B.3.  I2C Recommendations . . . . . . . . . . . . . . . . . . .  88
     B.4.  Native USB Recommendations  . . . . . . . . . . . . . . .  88
   Appendix C.  Test Vectors . . . . . . . . . . . . . . . . . . . .  88
     C.1.  Test Vector: Packed Unsigned Integer  . . . . . . . . . .  88
     C.2.  Test Vector: Reset Command  . . . . . . . . . . . . . . .  89
     C.3.  Test Vector: Reset Notification . . . . . . . . . . . . .  89
     C.4.  Test Vector: Inbound IPv6 Packet  . . . . . . . . . . . .  90
     C.5.  Test Vector: Outbound IPv6 Packet . . . . . . . . . . . .  90
   Appendix D.  Comparison with other protocols  . . . . . . . . . .  90
   Appendix E.  Acknowledgments  . . . . . . . . . . . . . . . . . .  92
   Authors' Addresses  . . . . . . . . . . . . . . . . . . . . . . .  93

1.  Introduction

   IEEE 802.15.4 based low-power wireless networks are quickly becoming
   ubiquitous, and with the introduction of 6LoWPAN[RFC4944],
   IPv6[RFC8200] connectivity is now possible on these networks.
   6LoWPAN-based network technologies such as Thread(R) and ZigBee(R) IP
   additionally provide additional features such as network security,
   mesh-networking, and ultra-low-power operation.  To fully realize
   low-power operation, a great deal of the IPv6 network and routing
   stack needs to be implemented directly on a NCP (Network Co-
   Processor).  With that, we again find ourselves with a question of
   how best to communicate with and manage this new class of peripheral.

   The problem of needing to communicate with and manage an NCP is not
   new: However, the current existing and proposed approaches have
   severe drawbacks (See Appendix D).

   Spinel is a host-controller protocol designed to address the
   drawbacks of existing protocols and lower implementation and
   deployment burdens by providing a standardized mechanism for the
   management and control of IPv6-based NCPs by general purpose
   Application Processors (AP).

1.1.  Objectives

   Spinel was designed to satisfy the following objectives:

   1.  The protocol must allow for managing the network interface at the
       network layer.

   2.  The protocol must allow for multiple data streams, including IPv6
       traffic, debug messages, and raw sniffed traffic.



Quattlebaum & Woodyatt     Expires May 5, 2018                  [Page 5]

Internet-Draft                 Spinel Core                 November 2017


   3.  The protocol must be link agnostic: should work efficiently over
       UART, SPI, USB or other busses and links.

   4.  The protocol must be relatively straightforward to understand and
       implement.

   5.  The protocol must gracefully handle the addition of new features
       and capabilities without necessarily breaking backward
       compatibility.

   6.  The protocol must support multiple conceptually independent
       network interfaces.

   7.  The protocol must be reasonably compact and lightweight.

   Beyond this core framework, properties and commands enable various
   common features of IPv6.  In related and forthcoming documents, the
   Spinel protocol is extended to support NCP implementations for
   specific IPv6 link types, e.g.  Thread(R).

1.2.  Terminology

   The key words "MUST", "MUST NOT", "REQUIRED", "SHALL", "SHALL NOT",
   "SHOULD", "SHOULD NOT", "RECOMMENDED", "MAY", and "OPTIONAL" in this
   document are to be interpreted as described in [RFC2119].

   The layout diagrams in this document that show encodings of data in
   byte sequences use the convention described in Guide for Internet
   Standards Writers [RFC2360] section 3.1, Packet Diagrams.
   Specifically, bits in bytes are indexed from most significant to
   least significant, and the least significant bit in a field
   representing an integer value more than one bit in length is the
   least significant bit of a the signed or unsigned number, as the case
   requires.

   The term "byte" is used in its now-customary sense as a synonym for
   "byte".

   Most multi-byte values are encoded in little-endian order (that is,
   most significant byte first).  This is discussed in more detail in
   Section 2.

   In this document, individual bits are numbered ascending order from
   the most significant bit to the least significant bit.  For example,
   the byte value 0x80 has bit zero (0) set and all other bits clear.

   This specification makes use of the following terminology:




Quattlebaum & Woodyatt     Expires May 5, 2018                  [Page 6]

Internet-Draft                 Spinel Core                 November 2017


   [CREF1]

   AP
      Application Processor, the host processor to which the NCP is a
      peripheral.

   FCS
      Final Checksum.  Bytes added to the end of a packet to help
      determine if the packet was received without corruption.

   NCP
      Network Control Processor.

   NLI
      Network Link Identifier.  May be a value between zero and three.
      See Section 3.2.2 for more information.

   Partition
      TODO: Writeme.

   PHY
      Physical layer.  Refers to characteristics and parameters related
      to the physical implementation and operation of a networking
      medium.

   PUI
      Packed Unsigned Integer.  A way to serialize an unsigned integer
      using one, two, or three bytes.  Used throughout the Spinel
      protocol.  See Section 2.1 for more information.

   TID
      Transaction Identifier.  May be a value between zero and fifteen.
      See Section 3.2.3 for more information.

2.  Data Representation

   Spinel, being a low-level protocol between two devices which are
   likely to have a little-endian architecture, uses little-endian
   representations exclusively for all integers smaller than four bytes.
   For implementation convenience, values larger than four bytes (EUI64,
   IPv6 addresses, etc) are stored as they are traditionally represented
   (typically big-endian).

2.1.  Packed Unsigned Integers

   Certain types of integers, such as command or property identifiers,
   usually have a value on the wire that is less than 127.  However, in
   order to not preclude the use of values larger than 255, we would



Quattlebaum & Woodyatt     Expires May 5, 2018                  [Page 7]

Internet-Draft                 Spinel Core                 November 2017


   need to add an extra byte.  Doing this would add an extra byte to all
   packets, which can add up in terms of bandwidth.  To address this,
   Spinel uses Packed Unsigned Integers, or PUIs.

   The PUI format used in Spinel is based on the unsigned integer format
   in EXI [1], except that we limit the maximum value to the largest
   value that can be encoded to three bytes.  The maximum value that can
   be encoded is 2,097,151.

   For all values less than 127, the packed form of the number is simply
   a single byte which directly represents the number.  For values
   larger than 127, the following process is used to encode the value:

   1.  The unsigned integer is broken up into _n_ 7-bit chunks and
       placed into _n_ bytess, leaving the most significant bit of each
       byte unused.

   2.  Order the bytess from least-significant to most-significant.
       (Little-endian)

   3.  Clear the most significant bit of the most significant byte.  Set
       the least significant bit on all other bytes.

   Where _n_ is the smallest number of 7-bit chunks you can use to
   represent the given value.

   Take the value 1337, for example:

                              1337 => 0x0539
                                   => [39 0A]
                                   => [B9 0A]

   To decode the value, you collect the 7-bit chunks until you find an
   byte with the most significant bit clear.

3.  Spinel Frames

   Spinel is a frame-based (rather than stream-based) protocol.  Frames
   can be of any size between two bytes and MTU of the channel (which is
   RECOMMENDED to be at least 1300 bytes).  Spinel frames SHALL be
   delivered reliably and in-order.  It is the responsibility of the
   lower layer to make those guarantees.

   The mechanism responsible for transporting frames between the AP and
   the NCP (while also ensuring both reliable and in-order delivery) is
   called the _framing mechanism_. While Spinel does not mandate any
   specific framing mechanism be used, the RECOMMENDED mechanisms are




Quattlebaum & Woodyatt     Expires May 5, 2018                  [Page 8]

Internet-Draft                 Spinel Core                 November 2017


   outlined in Appendix B.  This layered approach privides a great deal
   of implementation flexibility.

3.1.  Frame Format

   A Spinel frame is the concatenation of the following elements:

   o  A header comprising a single byte.  (See Section 3.2).

   o  A command identifier.  (See Section 6)

   o  A command-defined payload, which may be empty.

       0                   1                   2                   3
      0 1 2 3 4 5 6 7 8 9 0 1 2 3 4 5 6 7 8 9 0 1 2 3 4 5 6 7 8 9 0 1
     +-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+
     |     HEADER    |  COMMAND ID   | PAYLOAD ...
     +-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+

                    Structure of a typical Spinel frame

   Since the size of the frame is a part of the framing mechanism, it is
   omitted from the frame.

3.2.  Header

   The header byte is composed as follows:

                       0   1   2   3   4   5   6   7
                     +---+---+---+---+---+---+---+---+
                     |  FLG  |  NLI  |      TID      |
                     +---+---+---+---+---+---+---+---+

                               Header Format

3.2.1.  FLG: Flag

   The Flag (FLG) field in the two most significant bits of the header
   byte ("FLG") is always set to the value two (or "10" in binary).  Any
   frame received with these bits set to any other value SHALL NOT be
   considered a Spinel frame.

   This convention allows Spinel to be line compatible with BTLE HCI.
   By defining the first two bit in this way we can disambiguate between
   Spinel frames and HCI frames (which always start with either "0x01"
   or "0x04") without any additional framing overhead.  (TODO: Verify)





Quattlebaum & Woodyatt     Expires May 5, 2018                  [Page 9]

Internet-Draft                 Spinel Core                 November 2017


3.2.2.  NLI: Network Link Identifier

   The Network Link Identifier (NLI) field is used to distinguish
   between independent "virtual" network links.  It is stored in the
   third and fourth most significant bits as an integer between 0 and 3.

   The NLI field allows for the control and management of an NCP that
   can be connected to more than one network simultaneously, as if
   multiple independent NCPs were present.  The exact details regarding
   the usage of such a feature are not yet specified and considered
   outside the scope of this document.

   All NCPs conforming to this protocol SHALL implement NLI 0 and MAY
   provide additional network interfaces via NLI values 1, 2, and 3.

   Any commands sent to an unimplemented NLI MUST fail with:

   o  Header byte identical to the offending command.

   o  "CMD_PROP_VALUE_IS" for the command id.

   o  "PROP_LAST_STATUS" as the property key.

   o  "STATUS_INVALID_INTERFACE" as the value.

3.2.3.  TID: Transaction Identifier

   The Transaction Identifier (TID) field in the four least significant
   bits of the header is used for correlating responses to the commands
   which generated them.

   When a command is sent from the AP, any reply to that command sent by
   the NCP will use the same value for the TID.  When the AP receives a
   frame that matches the TID of the command it sent, it can easily
   recognize that frame as the actual response to that command.

   The zero value of TID is used for commands to which a correlated
   response is not expected or needed, such as for unsolicited update
   commands sent to the AP from the NCP.

   Note that while the frame format is symmetric between the frames
   being sent to the NCP versus frames being sent from the NCP, the
   behaviors are not.  The NCP MUST NOT send a frame with a non-zero TID
   that is not a response to a frame it had recently received with that
   same TID.  All unsolicited or asynchronous commands originating from
   the NCP MUST use TID zero (0).





Quattlebaum & Woodyatt     Expires May 5, 2018                 [Page 10]

Internet-Draft                 Spinel Core                 November 2017


3.3.  Command ID

   The command identifier is a 21-bit unsigned integer encoded in up to
   three bytes using the packed unsigned integer format described in
   Section 2.1.  This encoding allows for up to 2,097,152 individual
   commands, with the first 127 commands represented as a single byte.
   Command identifiers larger than 2,097,151 are explicitly forbidden.

   To date, no command id has been longer than one byte long, so all
   figures in this document will represent the command ID as only taking
   a single byte.

3.4.  Payload

   The command payload follows the command identifier in a Spinel frame,
   containing the serialization of any arguments that the indicated
   command may require.  The exact composition of a command payload is
   determined by the specific command identifier being used and MUST be
   empty if the command has no arguments.

4.  Property Overview

   Spinel is largely a property-based protocol.  The NCP exposes various
   properties that the host can manipulate to control its behavior.  The
   theory of operation is similar to representational state transfer
   (REST)(TODO:CITE), with a property defined for every attribute of the
   operational state of a network interface for which an IPv6 node may
   need the typical operators, i.e. Create, Read, Update, Delete and
   Alert.

   The inspiration of the approach used in Spinel was the concept of
   hardware registers for peripherals.  The goal was to avoid, as much
   as possible, the use of large complicated structures and/or method
   argument lists.  The reason for avoiding these is because they have a
   tendency to change in incompatible ways, especially early in
   development.  For example, adding or removing an argument from a
   command will render the entire protocol incompatible.  By using
   properties and conforming to a well-designed information model,
   extending the protocol is usually as simple as an additional
   property.

   Almost all features and capabilities are implemented using
   properties.  Most new features that are initially proposed as
   explicit commands can be satisfactorily adapted to be property-based
   instead.  In cases where doing so is particularly awkward, explicit
   commands are used instead (See Section 6).





Quattlebaum & Woodyatt     Expires May 5, 2018                 [Page 11]

Internet-Draft                 Spinel Core                 November 2017


   Properties are identified by a unique unsigned integer value between
   0 and 2,097,151 (See Section 2.1) called a "property key".  Property
   keys are recorded in the Spinel property key registry (EDITOR:
   proposal is to create an IANA registry) with some ranges already
   reserved for future expansion of the core and other ranges available
   for profile specialization.

   What follows is a overview of how properties work.

4.1.  Property Operators

   Conceptually, the following operations are used by the AP to query or
   change a property's value:

   o  "GET"

   o  "SET"

   o  "INSERT"

   o  "REMOVE"

   In addition, the following operations can be used by the NCP to
   indicate changes to the value of a property:

   o  "IS"

   o  "INSERTED"

   o  "REMOVED"

   Not all properties support all of the above operations.  Which
   operations are supported is generally determined by two things: what
   type of property it is and that property's readability/writability.

4.2.  Property Types

   Conceptually, there are three different types of properties:

   o  Single-value properties

   o  Multiple-value (Array) properties

   o  Stream properties

   These are described in further detail in the following sections.





Quattlebaum & Woodyatt     Expires May 5, 2018                 [Page 12]

Internet-Draft                 Spinel Core                 November 2017


4.2.1.  Single-Value Properties

   Single-value properties are properties that have a simple
   representation of a single value.  Examples would be:

   o  Current radio channel (Represented as a unsigned 8-bit integer)

   o  Network name (Represented as a UTF-8 encoded string)

   o  802.15.4 PAN ID (Represented as a unsigned 16-bit integer)

   The valid operators on these sorts of properties are "GET" and "SET".

4.2.2.  Multiple-Value Properties

   Multiple-Value Properties have more than one value associated with
   them.  Examples would be:

   o  List of channels supported by the radio hardware.

   o  List of IPv6 addresses assigned to the interface.

   o  List of capabilities supported by the NCP.

   The valid operators on these sorts of properties are "GET", "SET",
   "INSERT", and "REMOVE".

   When the value is fetched using "GET", an individual property will
   return the entire list of items as either of the following:

   1.  The concatenation of all of the individual values.  This is used
       in cases where the length of an individual item is fixed.

   2.  The concatenation of all of the individual values, each prefixed
       by a 16-bit big-endian integer describing the length of the
       individual item.  This would be used in cases where the length of
       an individual item is not constant.

   The order of the returned items, unless explicitly defined for that
   specific property, is undefined.

   "SET" provides a way to completely replace all previous values, with
   the item format matching what would be used for "GET".  Calling "SET"
   with an empty value effectively instructs the NCP to empty that
   property.






Quattlebaum & Woodyatt     Expires May 5, 2018                 [Page 13]

Internet-Draft                 Spinel Core                 November 2017


   "INSERT" and "REMOVE" provide mechanisms for the insertion or removal
   of individual items _by value_. The payload for these operators is a
   single item.

4.2.3.  Stream Properties

   Stream properties represent dynamic streams of data rather than a
   specific value.  Examples would be:

   o  Network packet stream (Section 8.6.3)

   o  Raw packet stream (Section 8.6.2)

   o  Debug message stream (Section 8.6.1)

   All such properties emit changes asynchronously using the "IS"
   operator, sent from the NCP to the AP.  For example, as IPv6 traffic
   is received by the NCP, the IPv6 packets are sent to the AP by way of
   asynchronous "IS" operations for the network packet stream property.

   Some of these properties also support the AP sending data back to the
   NCP using the "SET" operation.  For example, this is how the AP sends
   IPv6 traffic to the NCP.

   The behavior and meaning of the "GET", "INSERT", "REMOVE",
   "INSERTED", and "REMOVED" operations for stream properties is
   undefined and SHOULD NOT be used.

5.  Status Codes

   The Spinel core protocol defines some standard status codes.  Status
   codes are used to indicate either the success of a transaction or the
   specific reason that a specific transaction failed.  Their names,
   assigned numbers and a short description of their operational
   semantics are shown in the following table:
















Quattlebaum & Woodyatt     Expires May 5, 2018                 [Page 14]

Internet-Draft                 Spinel Core                 November 2017


               +-------+-----------------------------------+
               | Id    | Name                              |
               +-------+-----------------------------------+
               | 0     | "STATUS_OK"                       |
               | 1     | "STATUS_FAILURE"                  |
               | 2     | "STATUS_UNIMPLEMENTED"            |
               | 3     | "STATUS_INVALID_ARGUMENT"         |
               | 4     | "STATUS_INVALID_STATE"            |
               | 5     | "STATUS_INVALID_COMMAND"          |
               | 6     | "STATUS_INVALID_INTERFACE"        |
               | 7     | "STATUS_INTERNAL_ERROR"           |
               | 8     | "STATUS_SECURITY_ERROR"           |
               | 9     | "STATUS_PARSE_ERROR"              |
               | 10    | "STATUS_IN_PROGRESS"              |
               | 11    | "STATUS_NOMEM"                    |
               | 12    | "STATUS_BUSY"                     |
               | 13    | "STATUS_PROP_NOT_FOUND"           |
               | 14    | "STATUS_PACKET_DROPPED"           |
               | 15    | "STATUS_EMPTY"                    |
               | 16    | "STATUS_CMD_TOO_BIG"              |
               | 17    | "STATUS_NO_ACK"                   |
               | 18    | "STATUS_CCA_FAILURE"              |
               | 19    | "STATUS_ALREADY"                  |
               | 20    | "STATUS_ITEM_NOT_FOUND"           |
               | 21    | "STATUS_INVALID_COMMAND_FOR_PROP" |
               | _TBD_ | "STATUS_PROP_VALUE_TOO_BIG"       |
               | _TBD_ | "STATUS_JOIN_FAIL_SECURITY"       |
               | _TBD_ | "STATUS_JOIN_FAIL_LONELY"         |
               | _TBD_ | "STATUS_JOIN_FAIL_OTHER"          |
               +-------+-----------------------------------+

                        Enumeration of status codes

   STATUS_OK
      Indicates that the operation has completed successfully.

   STATUS_FAILURE
      Indicates that the operation has failed for an unspecified reason.
      The use of this status code SHOULD be avoided.  If a more specific
      status code exists that better explains the failure, then that
      status code MUST be used instead.

   STATUS_UNIMPLEMENTED
      Indicates that the given operation has not been implemented.

   STATUS_INVALID_ARGUMENT





Quattlebaum & Woodyatt     Expires May 5, 2018                 [Page 15]

Internet-Draft                 Spinel Core                 November 2017


      Indicates that an argument to the given operation is invalid.  The
      value may be out of range or improperly formatted.  This status
      code is also returned when setting an invalid value to a property.

   STATUS_INVALID_STATE
      Indicates that the given operation is invalid for the current
      state of the device.

   STATUS_INVALID_COMMAND
      The given command id is not recognized.

   STATUS_INVALID_INTERFACE
      The given NLI is not supported.

   STATUS_INTERNAL_ERROR
      An internal runtime error has occurred.  TODO(RQ): What sort of
      error would cause this to be emitted?

   STATUS_SECURITY_ERROR
      A security or authentication error has occurred.  TODO(RQ):
      Elaborate on when this would be returned.

   STATUS_PARSE_ERROR
      An error has occurred while parsing the command.

   STATUS_IN_PROGRESS
      An error has occurred while parsing the command.  TODO(RQ): Are we
      still using this?  Elaborate on when this would be returned.

   STATUS_NOMEM
      The operation has been prevented due to memory pressure.

   STATUS_BUSY
      The device is currently performing a mutually exclusive operation.
      For example, you will get this status code if you attempt to
      change the value of "PROP_NET_STACK_UP" while performing an energy
      scan.  This status differs from "STATUS_INVALID_STATE" in that it
      will resolve spontaneously.

   STATUS_PROP_NOT_FOUND
      The given property key is not recognized.

   STATUS_PACKET_DROPPED
      The packet was dropped.  This status code is only emitted when
      sending data to a packet stream with a TID other than zero.

   STATUS_EMPTY




Quattlebaum & Woodyatt     Expires May 5, 2018                 [Page 16]

Internet-Draft                 Spinel Core                 November 2017


      The result of the operation is empty.  TODO(RQ): Elaborate on when
      this would be returned.

   STATUS_CMD_TOO_BIG
      The command was too large to fit in the internal buffer.  This is
      generally indicates some sort of misconfiguration.

   STATUS_NO_ACK
      The packet was not acknowledged.  This status code is only emitted
      when sending data to a packet stream with a TID other than zero.

   STATUS_CCA_FAILURE
      The packet was not sent due to a CCA failure.  This status code is
      only emitted when sending data to a packet stream with a TID other
      than zero.

   STATUS_ALREADY
      The operation is already in progress, or the property already has
      the value.  This is emitted by "PROP_LOCK" (Section 8.5.10) and
      "PROP_MAC_SCAN_STATE" (Section 8.8.1).

   STATUS_ITEM_NOT_FOUND
      The given item could not be found in the property.  This status
      code MAY be used to indicate a failure to remove a specific value
      from a multiple-value property.  TODO(RQ): Are we still using
      this?

   STATUS_INVALID_COMMAND_FOR_PROP
      The given command cannot be performed on this property.  For
      example, if a property was read-only, this status would be emitted
      if you attempted to perform a "CMD_PROP_VALUE_SET" on it.

   STATUS_PROP_VALUE_TOO_BIG
      The value for this property is too large.

   STATUS_JOIN_FAIL_SECURITY
      The NLI failed to join the network due to a security problem.
      Usually indicates that the wrong credential is being used.  (See
      Section 8.9.9)

   STATUS_JOIN_FAIL_LONELY
      The NLI failed to join the network because it could not find a
      peer.  Usually indicates that the device is out of range.  (See
      Section 8.9.9)

   STATUS_JOIN_FAIL_OTHER
      The NLI failed to join the network for an unspecified reason.
      (See Section 8.9.9)



Quattlebaum & Woodyatt     Expires May 5, 2018                 [Page 17]

Internet-Draft                 Spinel Core                 November 2017


5.1.  Reset Codes

   All status codes which fall into the inclusive range of 112-127 are
   considered _reset codes_. These codes are emitted asynchronously
   after an NCP reset and provide a way to differentiate different
   causes of resets.  If the first command the AP sends to the NCP after
   a reset is to fetch "PROP_LAST_STATUS", then the reset code MUST be
   returned.

                     +-----+-------------------------+
                     | Id  | Name                    |
                     +-----+-------------------------+
                     | 112 | "STATUS_RESET_POWER_ON" |
                     | 113 | "STATUS_RESET_EXTERNAL" |
                     | 114 | "STATUS_RESET_SOFTWARE" |
                     | 115 | "STATUS_RESET_FAULT"    |
                     | 116 | "STATUS_RESET_CRASH"    |
                     | 117 | "STATUS_RESET_ASSERT"   |
                     | 118 | "STATUS_RESET_OTHER"    |
                     | 119 | "STATUS_RESET_UNKNOWN"  |
                     | 120 | "STATUS_RESET_WATCHDOG" |
                     +-----+-------------------------+

                        Enumeration of reset codes

   Of these defined reset codes, only "STATUS_RESET_POWER_ON",
   "STATUS_RESET_EXTERNAL", and "STATUS_RESET_SOFTWARE" are emitted
   during normal operation.  All other reset codes generally indicate
   some sort of software bug or hardware failure.

   Unexpected/unrequested resets are always an indication of a problem,
   no matter what the code value is.

   STATUS_RESET_POWER_ON
      Cold power-on start.

   STATUS_RESET_EXTERNAL
      External device reset.  This is generally caused by RESET pin on
      the NCP being asserted.

   STATUS_RESET_SOFTWARE
      Software-requested orderly reset.  This is generally caused by the
      AP sending the NCP "CMD_RESET".

   STATUS_RESET_FAULT
      Internal software abortive reset.  TODO: Elaborate on what this
      means.  Consider repurposing this code.




Quattlebaum & Woodyatt     Expires May 5, 2018                 [Page 18]

Internet-Draft                 Spinel Core                 November 2017


   STATUS_RESET_CRASH
      Unrecoverable software execution failure.

   STATUS_RESET_ASSERT
      Software invariant property not respected.

   STATUS_RESET_OTHER
      Unspecified cause.

   STATUS_RESET_UNKNOWN
      Failure while recovering cause of reset.

   STATUS_RESET_WATCHDOG
      Watchdog timer expired, forcing a reset.

5.2.  Status Code Ranges

   IANA maintains a registry of Spinel "STATUS_CODE" numbers, with
   varying registration policies assigned for different ranges according
   to the following table:

              +-----------------------+--------------------+
              | Status Code Range     | Reservation Policy |
              +-----------------------+--------------------+
              | 0 - 127               | Standards Action   |
              | 128 - 15,359          | Unassigned         |
              | 15,360 - 16,383       | Private Use        |
              | 16,384 - 1,999,999    | Unassigned         |
              | 2,000,000 - 2,097,151 | Experimental Use   |
              +-----------------------+--------------------+

5.3.  How Status is Indicated

   Status codes are sent from the NCP to the AP via "PROP_LAST_STATUS"
   using the "CMD_VALUE_IS" command to indicate the return status of a
   previous command.  As with any response, the TID field of the FLAG
   byte is used to correlate the response with the request.

   Note that most successfully executed commands do not indicate a last
   status of "STATUS_OK".  The usual way the NCP indicates a successful
   command is to mirror the property change back to the AP.  For
   example, if you do a "CMD_VALUE_SET" on "PROP_PHY_ENABLED", the NCP
   would indicate success by responding with a "CMD_VALUE_IS" for
   "PROP_PHY_ENABLED".  If the command failed, "PROP_LAST_STATUS" would
   be emitted instead.

   See Section 8.5.1 for more information on "PROP_LAST_STATUS".




Quattlebaum & Woodyatt     Expires May 5, 2018                 [Page 19]

Internet-Draft                 Spinel Core                 November 2017


6.  Commands

   This section defines the standard commands used in all Spinel
   protocol interactions.  Each command is defined for one of the
   following two contexts:

   o  AP -> NCP: commands sent by the Application Processor (AP) to the
      Network Co-Processor (NCP).

   o  NCP -> AP: commands sent by the Network Co-Processor (NCP) to the
      Application Processor (AP).

   A conforming implementation MAY transmit any command defined for its
   operating context, and MUST process any command received for its
   operating context, according to the operational semantics defined in
   this section.

   IANA maintains a registry of Spinel "CMD" command numbers, with
   varying registration policies assigned for different ranges according
   to the following table:

              +-----------------------+--------------------+
              |       CMD Number      | Reservation policy |
              +-----------------------+--------------------+
              |         0 - 63        |  Standards Action  |
              |      64 - 15,359      |     Unassigned     |
              |    15,360 - 16,383    |    Private Use     |
              |   16,384 - 1,999,999  |     Unassigned     |
              | 2,000,000 - 2,097,151 |  Experimental Use  |
              +-----------------------+--------------------+

6.1.  CMD 0: (AP -> NCP) CMD_NOOP

                      0                   1
                      0 1 2 3 4 5 6 7 8 9 0 1 2 3 4 5
                     +-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+
                     |1 0|NLI|  TID  |    CMD_NOOP   |
                     +-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+
                     ^     HEADER    ^    COMMAND    ^

                           Structure of CMD_NOOP

   No-Operation.  Commands the NCP to reply with a "STATUS_OK" code.
   This is primarily used for liveliness checks.

   The command payload for this command SHOULD be empty.  The receiver
   MUST ignore any non-empty command payload.




Quattlebaum & Woodyatt     Expires May 5, 2018                 [Page 20]

Internet-Draft                 Spinel Core                 November 2017


   There is no error condition for this command.

6.2.  CMD 1: (AP -> NCP) CMD_RESET

                      0                   1
                      0 1 2 3 4 5 6 7 8 9 0 1 2 3 4 5
                     +-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+
                     |1 0|NLI|  TID  |   CMD_RESET   |
                     +-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+

                          Structure of CMD_RESET

   Reset NCP.  Commands the NCP to perform a software reset.  Due to the
   nature of this command, the TID is ignored.  The AP should instead
   wait for a "CMD_PROP_VALUE_IS" command from the NCP indicating
   "PROP_LAST_STATUS" has been set to "STATUS_RESET_SOFTWARE" (see
   Section 5).

   The command payload SHOULD be empty, and it SHOULD NOT be processed.

   If an error occurs, the value of the emitted "PROP_LAST_STATUS" will
   be set accordingly to the status code for the error.

6.3.  CMD 2: (AP -> NCP) CMD_PROP_VALUE_GET

       0                   1                   2                   3
      0 1 2 3 4 5 6 7 8 9 0 1 2 3 4 5 6 7 8 9 0 1 2 3 4 5 6 7 8 9 0 1
     +-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+
     |1 0|NLI|  TID  |      CMD      | PROP_KEY (PUI, 1-3 bytes) ...
     +-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+

                      Structure of CMD_PROP_VALUE_GET

   Get property value.  Commands the NCP to emit a "CMD_PROP_VALUE_IS"
   command for the given property identifier.

   The payload for this command is the property identifier encoded in
   the packed unsigned integer format described in Section 2.1.

   If an error occurs, the value of the emitted "PROP_LAST_STATUS" will
   be set accordingly to the status code for the error.

6.4.  CMD 3: (AP -> NCP) CMD_PROP_VALUE_SET








Quattlebaum & Woodyatt     Expires May 5, 2018                 [Page 21]

Internet-Draft                 Spinel Core                 November 2017


       0                   1                   2                   3
      0 1 2 3 4 5 6 7 8 9 0 1 2 3 4 5 6 7 8 9 0 1 2 3 4 5 6 7 8 9 0 1
     +-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+
     |1 0|NLI|  TID  |      CMD      | PROP_KEY (PUI, 1-3 bytes) ...
     +-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+
     |  NEW PROPERTY VALUE ...
     +-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+

                      Structure of CMD_PROP_VALUE_SET

   Set property value.  Commands the NCP to set the given property to
   the specific given value, replacing any previous value, and to emit a
   "CMD_PROP_VALUE_IS" command for the "PROP_LAST_STATUS" command
   indicating "STATUS_OK" if successful.

   The payload for this command is the property identifier encoded in
   the packed unsigned integer format described in Section 2.1, followed
   by the property value.  The exact format of the property value is
   defined by the property.

   If an error occurs, the value of the emitted "PROP_LAST_STATUS" will
   be set accordingly to the status code for the error.

6.5.  CMD 4: (AP -> NCP) CMD_PROP_VALUE_INSERT

       0                   1                   2                   3
      0 1 2 3 4 5 6 7 8 9 0 1 2 3 4 5 6 7 8 9 0 1 2 3 4 5 6 7 8 9 0 1
     +-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+
     |1 0|NLI|  TID  |      CMD      | PROP_KEY (PUI, 1-3 bytes) ...
     +-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+
     |  ITEM TO INSERT ...
     +-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+

                    Structure of CMD_PROP_VALUE_INSERT

   Insert value into list property.  Commands the NCP to insert the
   given value into a list-oriented property, without removing other
   items in the list.  The resulting order of items in the list is
   defined by the individual property being operated on.

   The payload for this command is the property identifier encoded in
   the packed unsigned integer format described in Section 2.1, followed
   by the value to be inserted.  The exact format of the value is
   defined by the property.

   If the type signature of the property specified by "PROP_ID" consists
   of a single structure enclosed by an array ("A(t(...))"), then the
   contents of "VALUE" MUST contain the contents of the structure



Quattlebaum & Woodyatt     Expires May 5, 2018                 [Page 22]

Internet-Draft                 Spinel Core                 November 2017


   ("...") rather than the serialization of the whole item ("t(...)").
   Specifically, the length of the structure MUST NOT be prepended to
   "VALUE".  This helps to eliminate redundant data.

   If an error occurs, the value of the emitted "PROP_LAST_STATUS" will
   be set accordingly to the status code for the error.

6.6.  CMD 5: (AP -> NCP) CMD_PROP_VALUE_REMOVE

       0                   1                   2                   3
      0 1 2 3 4 5 6 7 8 9 0 1 2 3 4 5 6 7 8 9 0 1 2 3 4 5 6 7 8 9 0 1
     +-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+
     |1 0|NLI|  TID  |      CMD      | PROP_KEY (PUI, 1-3 bytes) ...
     +-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+
     |  ITEM TO REMOVE ...
     +-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+

                    Structure of CMD_PROP_VALUE_REMOVE

   Remove value from list property.  Commands the NCP to remove the
   given value from a list-oriented property, without affecting other
   items in the list.  The resulting order of items in the list is
   defined by the individual property being operated on.

   Note that this command operates _by value_, not by index!

   The payload for this command is the property identifier encoded in
   the packed unsigned integer format described in Section 2.1, followed
   by the value to be removed.  The exact format of the value is defined
   by the property.

   If the type signature of the property specified by "PROP_ID" consists
   of a single structure enclosed by an array ("A(t(...))"), then the
   contents of "VALUE" MUST contain the contents of the structure
   ("...") rather than the serialization of the whole item ("t(...)").
   Specifically, the length of the structure MUST NOT be prepended to
   "VALUE".  This helps to eliminate redundant data.

   If an error occurs, the value of the emitted "PROP_LAST_STATUS" will
   be set accordingly to the status code for the error.

6.7.  CMD 6: (NCP -> AP) CMD_PROP_VALUE_IS









Quattlebaum & Woodyatt     Expires May 5, 2018                 [Page 23]

Internet-Draft                 Spinel Core                 November 2017


       0                   1                   2                   3
      0 1 2 3 4 5 6 7 8 9 0 1 2 3 4 5 6 7 8 9 0 1 2 3 4 5 6 7 8 9 0 1
     +-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+
     |1 0|NLI|  TID  |      CMD      | PROP_KEY (PUI, 1-3 bytes) ...
     +-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+
     |  CURRENT PROPERTY VALUE ...
     +-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+

                      Structure of CMD_PROP_VALUE_SET

   Property value notification.  This command can be sent by the NCP in
   response to a previous command from the AP, or it can be sent by the
   NCP in an unsolicited fashion to notify the AP of various state
   changes asynchronously.

   The payload for this command is the property identifier encoded in
   the packed unsigned integer format described in Section 2.1, followed
   by the current value of the given property.

6.8.  CMD 7: (NCP -> AP) CMD_PROP_VALUE_INSERTED

                       0                   1
                      0 1 2 3 4 5 6 7 8 9 0 1 2 3 4 5
                     +-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+
                     |1 0|NLI|  TID  |      CMD      |
                     +-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+
                     | PROP_KEY (PUI, 1-3 bytes) ...
                     +-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+
                     | ITEM TO BE INSERTED ...
                     +-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+

                   Structure of CMD_PROP_VALUE_INSERTED

   Property value insertion notification.  This command can be sent by
   the NCP in response to the "CMD_PROP_VALUE_INSERT" command, or it can
   be sent by the NCP in an unsolicited fashion to notify the AP of
   various state changes asynchronously.

   The payload for this command is the property identifier encoded in
   the packed unsigned integer format described in Section 2.1, followed
   by the value that was inserted into the given property.

   If the type signature of the property specified by "PROP_ID" consists
   of a single structure enclosed by an array ("A(t(...))"), then the
   contents of "VALUE" MUST contain the contents of the structure
   ("...") rather than the serialization of the whole item ("t(...)").
   Specifically, the length of the structure MUST NOT be prepended to
   "VALUE".  This helps to eliminate redundant data.



Quattlebaum & Woodyatt     Expires May 5, 2018                 [Page 24]

Internet-Draft                 Spinel Core                 November 2017


   The resulting order of items in the list is defined by the given
   property.

6.9.  CMD 8: (NCP -> AP) CMD_PROP_VALUE_REMOVED

                       0                   1
                      0 1 2 3 4 5 6 7 8 9 0 1 2 3 4 5
                     +-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+
                     |1 0|NLI|  TID  |      CMD      |
                     +-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+
                     | PROP_KEY (PUI, 1-3 bytes) ...
                     +-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+
                     | ITEM TO BE REMOVED ...
                     +-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+

                    Structure of CMD_PROP_VALUE_REMOVED

   Property value removal notification command.  This command can be
   sent by the NCP in response to the "CMD_PROP_VALUE_REMOVE" command,
   or it can be sent by the NCP in an unsolicited fashion to notify the
   AP of various state changes asynchronously.

   Note that this command operates _by value_, not by index!

   The payload for this command is the property identifier encoded in
   the packed unsigned integer format described in Section 2.1, followed
   by the value that was removed from the given property.

   If the type signature of the property specified by "PROP_ID" consists
   of a single structure enclosed by an array ("A(t(...))"), then the
   contents of "VALUE" MUST contain the contents of the structure
   ("...") rather than the serialization of the whole item ("t(...)").
   Specifically, the length of the structure MUST NOT be prepended to
   "VALUE".  This helps to eliminate redundant data.

   The resulting order of items in the list is defined by the given
   property.

6.10.  CMD 18: (AP -> NCP) CMD_PEEK












Quattlebaum & Woodyatt     Expires May 5, 2018                 [Page 25]

Internet-Draft                 Spinel Core                 November 2017


       0                   1                   2                   3
      0 1 2 3 4 5 6 7 8 9 0 1 2 3 4 5 6 7 8 9 0 1 2 3 4 5 6 7 8 9 0 1
     +-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+
     |1 0|NLI|  TID  |      CMD      |   ADDRESS (LITTLE ENDIAN) ...
     +-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+
        ... ADDRESS (LITTLE ENDIAN)  |     COUNT (LITTLE ENDIAN)     |
     +-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+

                           Structure of CMD_PEEK

   This command allows the NCP to fetch values from the RAM of the NCP
   for debugging purposes.  Upon success, "CMD_PEEK_RET" is sent from
   the NCP to the AP.  Upon failure, "PROP_LAST_STATUS" is emitted with
   the appropriate error indication.

   Due to the low-level nature of this command, certain error conditions
   may induce the NCP to reset.

   The NCP MAY prevent certain regions of memory from being accessed.

   The implementation of this command has security implications.  See
   Section 9 for more information.

   This command requires the capability "CAP_PEEK_POKE" to be present.

6.11.  CMD 19: (NCP -> AP) CMD_PEEK_RET

       0                   1                   2                   3
      0 1 2 3 4 5 6 7 8 9 0 1 2 3 4 5 6 7 8 9 0 1 2 3 4 5 6 7 8 9 0 1
     +-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+
     |1 0|NLI|  TID  |      CMD      |   ADDRESS (LITTLE ENDIAN) ...
     +-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+
        ... ADDRESS (LITTLE ENDIAN)  |     COUNT (LITTLE ENDIAN)     |
     +-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+
     |  VALUE OF MEMORY ADDRESS ...
     +-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+

                         Structure of CMD_PEEK_RET

   This command contains the contents of memory that was requested by a
   previous call to "CMD_PEEK".

   This command requires the capability "CAP_PEEK_POKE" to be present.








Quattlebaum & Woodyatt     Expires May 5, 2018                 [Page 26]

Internet-Draft                 Spinel Core                 November 2017


6.12.  CMD 20: (AP -> NCP) CMD_POKE

       0                   1                   2                   3
      0 1 2 3 4 5 6 7 8 9 0 1 2 3 4 5 6 7 8 9 0 1 2 3 4 5 6 7 8 9 0 1
     +-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+
     |1 0|NLI|  TID  |      CMD      |   ADDRESS (LITTLE ENDIAN) ...
     +-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+
        ... ADDRESS (LITTLE ENDIAN)  |     COUNT (LITTLE ENDIAN)     |
     +-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+
     |  VALUE TO WRITE TO MEMORY ADDRESS ...
     +-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+

                           Structure of CMD_POKE

   This command writes the bytes to the specified memory address for
   debugging purposes.

   Due to the low-level nature of this command, certain error conditions
   may induce the NCP to reset.

   The implementation of this command has security implications.  See
   Section 9 for more information.

   This command requires the capability "CAP_PEEK_POKE" to be present.

6.13.  CMD 21: (AP -> NCP) CMD_PROP_VALUE_MULTI_GET

   o  Required Capability: "CAP_CMD_MULTI"

                       0                   1
                      0 1 2 3 4 5 6 7 8 9 0 1 2 3 4 5
                     +-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+
                     |1 0|NLI|  TID  |      CMD      |
                     +-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+
                     | PROP_KEY 1 (PUI, 1-3 bytes) ...
                     +-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+
                     | PROP_KEY 2 (PUI, 1-3 bytes) ...
                     +-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+
                     | PROP_KEY 3 (PUI, 1-3 bytes) ...
                     +-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+
                     :            etc ...            :

                   Structure of CMD_PROP_VALUE_MULTI_GET

   Fetch the value of multiple properties in one command.  Arguments are
   a list of property IDs.  If all properties are fetched successfully,
   a "CMD_PROP_VALUES_ARE" command is sent back to the AP containing the
   property identifier and value of each fetched property.  The order of



Quattlebaum & Woodyatt     Expires May 5, 2018                 [Page 27]

Internet-Draft                 Spinel Core                 November 2017


   the results in "CMD_PROP_VALUES_ARE" match the order of properties
   given in "CMD_PROP_VALUE_GET".

   Errors fetching individual properties are reflected as indicating a
   change to "PROP_LAST_STATUS" for that property's place.

   Not all properties can be fetched using this method.  As a general
   rule of thumb, any property that blocks when getting will fail for
   that individual property with "STATUS_INVALID_COMMAND_FOR_PROP".

6.14.  CMD 22: (AP -> NCP) CMD_PROP_VALUE_MULTI_SET

   o  Required Capability: "CAP_CMD_MULTI"

   This command sets the value of several properties at once in the
   given order.  The setting of properties stops at the first error,
   ignoring any later properties.

                       0                   1
                      0 1 2 3 4 5 6 7 8 9 0 1 2 3 4 5
                     +-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+
                     |1 0|NLI|  TID  |      CMD      |
                     +-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+
                     | PROP/VALUE PAIR 1 ...
                     +-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+
                     | PROP/VALUE PAIR 2 ...
                     +-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+
                     | PROP/VALUE PAIR 3 ...
                     +-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+
                     :            etc ...            :

                   Structure of CMD_PROP_VALUE_MULTI_SET

   With each property/value pair above being:

       0                   1                   2                   3
      0 1 2 3 4 5 6 7 8 9 0 1 2 3 4 5 6 7 8 9 0 1 2 3 4 5 6 7 8 9 0 1
     +-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+
     |    LENGTH (LITTLE ENDIAN)     | PROP_KEY (PUI, 1-3 bytes) ...
     +-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+
     |  NEW PROPERTY VALUE ...
     +-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+

   The LENGTH field is the sum of the length of the property key and the
   new property value.

   The result of this command is generally "CMD_PROP_VALUES_ARE" unless
   (for example) a parsing error has occured (in which case



Quattlebaum & Woodyatt     Expires May 5, 2018                 [Page 28]

Internet-Draft                 Spinel Core                 November 2017


   "CMD_PROP_VALUE_IS" for "PROP_LAST_STATUS" would be the result).  The
   order of the results in "CMD_PROP_VALUES_ARE" match the order of
   properties given in "CMD_PROP_VALUE_MULTI_SET".

   Since the processing of properties to set stops at the first error,
   the resulting "CMD_PROP_VALUES_ARE" can contain fewer items than the
   requested number of properties to set.

   Not all properties can be set using this method.  As a general rule
   of thumb, any property that blocks when setting will fail for that
   individual property with "STATUS_INVALID_COMMAND_FOR_PROP".

6.15.  CMD 23: (NCP -> AP) CMD_PROP_VALUES_ARE

   o  Required Capability: "CAP_CMD_MULTI"

                       0                   1
                      0 1 2 3 4 5 6 7 8 9 0 1 2 3 4 5
                     +-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+
                     |1 0|NLI|  TID  |      CMD      |
                     +-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+
                     | PROP/VALUE PAIR 1 ...
                     +-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+
                     | PROP/VALUE PAIR 2 ...
                     +-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+
                     | PROP/VALUE PAIR 3 ...
                     +-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+
                     :            etc ...            :

                   Structure of CMD_PROP_VALUE_MULTI_ARE

   With each property/value pair above being:

       0                   1                   2                   3
      0 1 2 3 4 5 6 7 8 9 0 1 2 3 4 5 6 7 8 9 0 1 2 3 4 5 6 7 8 9 0 1
     +-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+
     |    LENGTH (LITTLE ENDIAN)     | PROP_KEY (PUI, 1-3 bytes) ...
     +-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+
     |  CURRENT PROPERTY VALUE ...
     +-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+

   This command is emitted by the NCP as the response to both the
   "CMD_PROP_VALUE_MULTI_GET" and "CMD_PROP_VALUE_MULTI_SET" commands.
   It is roughly analogous to "CMD_PROP_VALUE_IS", except that it
   contains more than one property.

   This command must *ONLY* be emitted by the NCP in response to either
   "CMD_PROP_VALUE_MULTI_GET" or "CMD_PROP_VALUE_MULTI_SET".  This



Quattlebaum & Woodyatt     Expires May 5, 2018                 [Page 29]

Internet-Draft                 Spinel Core                 November 2017


   command MUST NOT be emitted in response to any other command, or
   emitted asynchronously.

   The arguments are a list of structures containing the emitted
   property and the associated value.  These are presented in the same
   order as given in the associated initiating command.  In cases where
   getting or setting a specific property resulted in an error, the
   associated slot in this command will describe "PROP_LAST_STATUS".

6.16.  CMD 24: (AP -> NCP) CMD_RESET_NLI

                      0                   1
                      0 1 2 3 4 5 6 7 8 9 0 1 2 3 4 5
                     +-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+
                     |1 0|NLI|  TID  |     CMD 24    |
                     +-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+

                        Structure of CMD_RESET_NLI

   Reset a specific NLI.  Commands the NLI to return all properties and
   state to their defined "at reset" values.  The intent of this command
   is to be analogous to "CMD_RESET", except that it applies only to a
   single NLI.

   If the value of "PROP_INTERFACE_COUNT" is equal to one (1), then the
   NCP MAY treat this command as a synonym for "CMD_RESET"
   (Section 6.2).  Thus, the AP MUST NOT treat an NCP software reset as
   an unexpected reset unless "PROP_INTERFACE_COUNT" was previously
   detremined to be greater than one (1).

   Otherwise, upon success this command emits "STATUS_OK" from
   "PROP_LAST_STATUS".  The resetting of all of the NLI's state MUST NOT
   cause any asynchronous property updates to be emitted, with the
   exception of "PROP_STREAM_DEBUG" (Section 8.6.1).

7.  Capabilities

   Capabilities are how an NCP can advertise support for specific
   behaviors and functionalities.  They can be fetched via the
   "PROP_CAPS" property.

   See Section 8.5.6 for more information on "PROP_CAPS".

   A registry of capability codes is maintained by IANA with various
   reservation policies in effect for different ranges of values as
   shown in the table below:





Quattlebaum & Woodyatt     Expires May 5, 2018                 [Page 30]

Internet-Draft                 Spinel Core                 November 2017


               +-----------------------+------------------+
               | Capability Range      | Description      |
               +-----------------------+------------------+
               | 0 - 1027              | Standards Action |
               | 1027 - 15,359         | Unassigned       |
               | 15,360 - 16,383       | Private Use      |
               | 16,384 - 1,999,999    | Unassigned       |
               | 2,000,000 - 2,097,151 | Experimental Use |
               +-----------------------+------------------+

   The initial content of the registry is shown in the table below.

   +------+---------------------------+-------------------------------+
   | Code | Name                      | Reference                     |
   +------+---------------------------+-------------------------------+
   | 1    | "CAP_LOCK"                | Section 8.5.10                |
   | 2    | Reserved                  |                               |
   | 3    | Reserved                  |                               |
   | 4    | "CAP_POWER_SAVE"          | Section 8.5.8, Section 8.5.11 |
   | 5    | Reserved                  |                               |
   | 7    | "CAP_PEEK_POKE"           | Section 6.10-Section 6.12     |
   | 8    | "CAP_WRITABLE_RAW_STREAM" | Section 8.6.2                 |
   | 9    | Reserved                  |                               |
   | 10   | Reserved                  |                               |
   | 11   | "CAP_CMD_MULTI"           | Section 6.13                  |
   | 12   | "CAP_UNSOL_UPDATE_FILTER" | Section 8.5.12                |
   | 512  | "CAP_MAC_WHITELIST"       | Section 8.8.12                |
   | 513  | "CAP_MAC_RAW"             | EDITOR: to be provided.       |
   | TBD  | "CAP_MAC_802_15_4"        | TBD                           |
   | TBD  | "CAP_NET_STANDARD"        | TBD                           |
   +------+---------------------------+-------------------------------+

8.  Properties

   This section defines the syntax and specific operational details of
   the Spinel properties common to the core protocol.

8.1.  Command Semantics

   Individual properties MAY support one or more of the following
   commands:

   o  "CMD_PROP_VALUE_GET" (Section 6.3)

   o  "CMD_PROP_VALUE_SET" (Section 6.4)

   o  "CMD_PROP_VALUE_INSERT" (Section 6.5)




Quattlebaum & Woodyatt     Expires May 5, 2018                 [Page 31]

Internet-Draft                 Spinel Core                 November 2017


   o  "CMD_PROP_VALUE_REMOVE" (Section 6.6)

   Upon an error condition, the NCP SHALL respond in the typical fasion
   of indicating the error code via a "CMD_PROP_VALUE_IS" command with
   the appropriate status code(See @detail-status).

   Unless otherwise specified, an NCP MUST NOT emit a "PROP_LAST_STATUS"
   of "STATUS_OK" in response to the successful execution of any of the
   above commands.

   Upon successful execution of one of the property manipulation
   commands, the NCP SHALL send one of the following commands (with the
   same property key that was used for the sending command) to indicate
   success:

   o  "CMD_PROP_VALUE_IS" (Section 6.7)

   o  "CMD_PROP_VALUE_INSERTED" (Section 6.8)

   o  "CMD_PROP_VALUE_REMOVED" (Section 6.9)

   When an NCP has successfully handled a "CMD_PROP_VALUE_INSERT" or
   "CMD_PROP_VALUE_REMOVE" command on a multi-value property, the NCP
   SHOULD respond with a "CMD_PROP_VALUE_INSERTED" or
   "CMD_PROP_VALUE_REMOVED", respectfully.  However, if doing so is
   prohibitively complex, the NCP MAY instead respond with a
   "CMD_PROP_VALUE_IS" containing the entire list of items.

   The reason for the above behavior is that the NCP is the ultimate
   authority on the value of all properties.  By always indicating
   success by responding with the value of the property, we can make
   sure that the software running on the host is in sync with the
   behavior of the NCP.

8.2.  Asynchronous Updates

   Some properties support indicating changes in their state
   asynchronously by sending the following commands with a TID value of
   0:

   o  "CMD_PROP_VALUE_IS" (Section 6.7)

   o  "CMD_PROP_VALUE_INSERTED" (Section 6.8)

   o  "CMD_PROP_VALUE_REMOVED" (Section 6.9)






Quattlebaum & Woodyatt     Expires May 5, 2018                 [Page 32]

Internet-Draft                 Spinel Core                 November 2017


   Asynchronous updates for specific properties can be enabled or
   disabled using "PROP_UNSOL_UPDATE_FILTER", documented in
   Section 8.5.12.

8.3.  Property Identifiers

   IANA maintains a registry of Spinel "PROP_ID" property identifier
   numbers, with varying registration policies assigned for different
   ranges according to the following table:

               +-----------------------+------------------+
               | Property ID Range     | Description      |
               +-----------------------+------------------+
               | 0 - 127               | Standards Action |
               | 128 - 4,095           | Unassigned       |
               | 4,096 - 6,143         | Standards Action |
               | 6,144 - 15,359        | Unassigned       |
               | 15,360 - 16,383       | Private Use      |
               | 16,384 - 17,407       | Standards Action |
               | 17,408 - 1,999,999    | Unassigned       |
               | 2,000,000 - 2,097,151 | Experimental Use |
               +-----------------------+------------------+

8.4.  Property Identifier Sections

   Standard property identifier numbers are assigned in a hierarchy
   according to their purpose, as shown in the table below:

   +--------+-----------+---------------+------------------------------+
   | Name   | Primary   | Extended      | Documentation                |
   +--------+-----------+---------------+------------------------------+
   | Core   | 0 - 31    | 4,096 - 4,607 | Section 8.5                  |
   | PHY    | 32 - 47   | 4,608 - 4,863 | Physical (PHY) layer         |
   |        |           |               | specific                     |
   | MAC    | 48 - 63   | 4,864 - 5,119 | Media access (MAC) layer     |
   |        |           |               | specific                     |
   | NET    | 64 - 79   | 5,120 - 5,375 | Section 8.9                  |
   | Tech   | 80 - 95   | 5,376 - 5,631 | Section 8.5.4                |
   | IPv6   | 96 - 111  | 5,632 - 5,887 | Section 8.10                 |
   | Stream | 112 - 127 | 5,888 - 6,143 | Section 8.5                  |
   | Debug  | no        | 16,384 -      | Section 8.12                 |
   |        | primary   | 17,407        |                              |
   +--------+-----------+---------------+------------------------------+

   Note: most of the property identifier sections have two reserved
   ranges: a "primary" range (which is encoded as a single byte) and an
   "extended" range (which is encoded as two bytes).  Properties used
   very frequently are generally allocated from the "primary" range.



Quattlebaum & Woodyatt     Expires May 5, 2018                 [Page 33]

Internet-Draft                 Spinel Core                 November 2017


   EDITOR: the IANA registration template for Spinel standard properties
   identifiers requires the "Section Name" and "Range Identifier"
   parameters to facilitate the assignment of a suitable number from the
   appropriate range.

8.5.  Core Properties

8.5.1.  PROP 0: PROP_LAST_STATUS

   o  Type: Single-Value, Read-Only

   o  Asynchronous Updates: Yes

   o  Required: REQUIRED

   o  Scope: NLI

   o  Value Type: PUI

   o  Units: Enumeration

   o  Post-Reset Value: Reset Reason Code

   This property describes the status code of the last NCP operation.
   For many commands, failure is indicated by emitting this property
   with the TID matching the failing command.  It is generally not
   necessary to ever fetch the value of this property explicitly, as it
   is often emitted directly as an error response.  It is also
   occasionally emitted as a success response with a value of
   "STATUS_OK".

   Upon NCP reset, this property MUST be emitted with a status code
   indicating the reset reason.

   Upon receiving an update to PROP_LAST_STATUS with a status code that
   indicates a reset, the host SHALL assume that the NCP has been reset
   and that all properties have reverted to their defined after-reset
   values.

   See Section 5 for the complete list of status codes.

8.5.2.  PROP 1: PROP_PROTOCOL_VERSION

   o  Type: Single-Value, Constant

   o  Asynchronous Updates: No

   o  Required: REQUIRED



Quattlebaum & Woodyatt     Expires May 5, 2018                 [Page 34]

Internet-Draft                 Spinel Core                 November 2017


   o  Scope: NCP

   o  Value Type: UINT8, UINT8

   o  Post-Reset Value: 4, 3

   Describes the spinel protocol version information.  This property
   contains two fields:

                       0                   1
                      0 1 2 3 4 5 6 7 8 9 0 1 2 3 4 5
                     +-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+
                     | MAJOR_VERSION | MINOR_VERSION |
                     +-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+

                    PROP_PROTOCOL_VERSION Value Format

   MAJOR_VERSION
      The major version number is used to identify backward incompatible
      differences between protocol versions.  The AP MUST enter a
      FAULT(TODO: Define this) state if the given major version number
      is unsupportable.

   MINOR_VERSION
      The minor version number is used to identify backward-compatible
      differences between protocol versions.  A mismatch between the
      advertised minor version number and the minor version that is
      supported by the AP SHOULD NOT be fatal to the operation of the
      AP.

   This document describes major version 4, minor version 3 of this
   protocol.  (TODO: UPDATE THIS)

   If a NCP supports multiple NLIs, the value of this property MUST be
   identical across all implemented NLIs.

8.5.3.  PROP 2: PROP_NCP_VERSION

   o  Type: Single-Value, Constant

   o  Asynchronous Updates: No

   o  Required: REQUIRED

   o  Scope: NCP

   o  Value Type: STRING




Quattlebaum & Woodyatt     Expires May 5, 2018                 [Page 35]

Internet-Draft                 Spinel Core                 November 2017


   o  Post-Reset Value: Implementation-Specific

   Contains a zero-terminated ASCII string which describes the firmware
   currently running on the NCP.

   The value of this string MUST be different for every firmware
   release.

   The format of the string is not strictly defined, but it is intended
   to present similarly to the "User-Agent" string from HTTP.  The
   following format is RECOMMENDED:

   "STACK-NAME/STACK-VERSION[BUILD-INFO][; OTHER-INFO][; BUILD-DATE]"

   Where:

   STACK-NAME
      The name of the software running on the NCP.

   STACK-VERSION
      The version number of the software running on the NCP, like "1.0"
      or "3.2.6"

   BUILD-INFO
      Optional information indicating a specific build, like "b125" or
      "d26-25-gb684c7f".

   OTHER-INFO
      Other optional information about the build.

   BUILD-DATE
      OPTIONAL build date.

   Examples:

   o  "OpenThread/1.0d26-25-gb684c7f; DEBUG; May 9 2016 18:22:04"

   o  "ConnectIP/2.0b125 s1 ALPHA; Sept 24 2015 20:49:19"

   If a NCP supports multiple NLIs, the value of this property MUST be
   identical across all implemented NLIs.

8.5.4.  PROP 3: PROP_INTERFACE_TYPE

   o  Type: Single-Value, Constant

   o  Asynchronous Updates: No




Quattlebaum & Woodyatt     Expires May 5, 2018                 [Page 36]

Internet-Draft                 Spinel Core                 November 2017


   o  Required: REQUIRED

   o  Scope: NLI

   o  Value Type: PUI

   o  Units: Enumeration

   o  Post-Reset Value: Implementation-Specific

   This unsigned packed integer identifies the network protocol
   implemented by this NCP.  A registry of network interface type codes
   is maintained by IANA with a reservation policy of Specification
   Required.  The initial content of the registry is shown in the table
   below:

                        +------+------------------+
                        | Code | Network protocol |
                        +------+------------------+
                        | 0    | Bootloader       |
                        | 2    | ZigBee IP(TM)    |
                        | 3    | Thread(R)        |
                        +------+------------------+

   The AP MUST enter a FAULT state if it does not recognize the network
   protocol given by the NCP.

8.5.5.  PROP 4: PROP_INTERFACE_VENDOR_ID

   o  Type: Single-Value, Constant

   o  Asynchronous Updates: No

   o  Required: REQUIRED

   o  Scope: NCP

   o  Value Type: PUI

   o  Units: Enumeration

   o  Post-Reset Value: Implementation-Specific

   [CREF2]

   [CREF3]





Quattlebaum & Woodyatt     Expires May 5, 2018                 [Page 37]

Internet-Draft                 Spinel Core                 November 2017


8.5.6.  PROP 5: PROP_CAPS

   o  Type: Multiple-Value, Constant

   o  Has Item Length Prefix: No

   o  Asynchronous Updates: No

   o  Required: REQUIRED

   o  Scope: NLI

   o  Item Type: PUI

   o  Units: Enumeration

   o  Post-Reset Value: Implementation-Specific

   Describes the supported capabilities of this NCP.  Encoded as a list
   of packed unsigned integers.  See Section 7 for a list of values.

8.5.7.  PROP 6: PROP_INTERFACE_COUNT

   o  Type: Single-Value, Constant

   o  Asynchronous Updates: No

   o  Required: REQUIRED

   o  Scope: NCP

   o  Item Type: UINT8

   o  Units: Count

   o  Post-Reset Value: 1-4

   Describes the number of concurrent interfaces supported by this NCP.
   Since the concurrent interface mechanism is still TBD, this value
   MUST always be one.

   If a NCP supports multiple NLIs, the value of this property MUST be
   identical across all implemented NLIs.








Quattlebaum & Woodyatt     Expires May 5, 2018                 [Page 38]

Internet-Draft                 Spinel Core                 November 2017


8.5.8.  PROP 7: PROP_POWER_STATE

   o  Type: Single-Value, Read/Write

   o  Asynchronous Updates: Yes

   o  Required: *RECOMENDED*

   o  Scope: NLI

   o  Item Type: UINT8

   o  Units: Enumeration

   o  Post-Reset Value: "POWER_STATE_ONLINE"

   o  Required Capability: "CAP_POWER_SAVE"

   o  See Also: Section 8.8.11

   A single byte coded that indicates the current power state of the
   NCP.  Setting this property allows controls of the current NCP power
   state.  The following table enumerates the standard codes and their
   significance.

                    +------+--------------------------+
                    | Code | Name                     |
                    +------+--------------------------+
                    | 0    | "POWER_STATE_OFFLINE"    |
                    | 1    | "POWER_STATE_DEEP_SLEEP" |
                    | 2    | "POWER_STATE_STANDBY"    |
                    | 3    | "POWER_STATE_LOW_POWER"  |
                    | 4    | "POWER_STATE_ONLINE"     |
                    +------+--------------------------+

   [CREF4]

   POWER_STATE_OFFLINE
      NCP is physically powered off.

   POWER_STATE_DEEP_SLEEP
      NCP is not powered to detect any events on physical network media.

   POWER_STATE_STANDBY
      NCP is powered only to detect certain events on physical network
      media that signal to wake.

   POWER_STATE_LOW_POWER



Quattlebaum & Woodyatt     Expires May 5, 2018                 [Page 39]

Internet-Draft                 Spinel Core                 November 2017


      NCP is powered only for limited responsiveness for power
      conservation purposes.

   POWER_STATE_ONLINE
      NCP is powered for full responsiveness.

8.5.9.  PROP 8: PROP_HWADDR

   o  Type: Single-Value, Read-Only

   o  Asynchronous Updates: No

   o  Required: REQUIRED

   o  Scope: NLI

   o  Value Type: EUI64_BE

   o  Post-Reset Value: Determined by Factory

   The EUI-64 (TODO:CITE) format of the link-layer address of the
   device.  MAY be different across multiple NLIs.

8.5.10.  PROP 9: PROP_LOCK

   o  Type: Single-Value, Read-Write

   o  Asynchronous Updates: No

   o  Required: OPTIONAL

   o  Scope: NLI

   o  Required Capability: "CAP_LOCK"

   o  Value Type: BOOL

   o  Post-Reset Value: 0 (false)

   Property transaction lock.  Used for grouping transactional changes
   to several properties for simultaneous commit, or to temporarily
   prevent the automatic updating of property values.  When this
   property is set, all non-Spinel-related operations of the NCP are
   effectively frozen until it is cleared.  There is no support for
   transaction rollback.

   This property is only supported if the "CAP_LOCK" capability is
   present.



Quattlebaum & Woodyatt     Expires May 5, 2018                 [Page 40]

Internet-Draft                 Spinel Core                 November 2017


   Unlike most other properties, setting this property to true when the
   value of the property is already true SHALL fail with a last status
   of "STATUS_ALREADY".

8.5.11.  PROP 10: PROP_HOST_POWER_STATE

   o  Type: Single-Value, Read-Write

   o  Asynchronous Updates: No

   o  Required: RECOMMENDED

   o  Scope: NCP

   o  Required Capability: "CAP_POWER_SAVE"

   o  Value Type: UINT8

   o  Units: Enumeration

   o  Post-Reset Value: "HOST_POWER_STATE_ONLINE"

   Describes the current power state of the _AP_. This property is used
   by the AP to inform the NCP when it has changed power states.  The
   NCP can then use this state to determine which properties need
   asynchronous updates.  Enumeration is encoded as a single unsigned
   byte.

   The following table enumerates the standard codes and their
   significance.

                 +------+-------------------------------+
                 | Code | Name                          |
                 +------+-------------------------------+
                 | 0    | "HOST_POWER_STATE_OFFLINE"    |
                 | 1    | "HOST_POWER_STATE_DEEP_SLEEP" |
                 | 3    | "HOST_POWER_STATE_LOW_POWER"  |
                 | 4    | "HOST_POWER_STATE_ONLINE"     |
                 +------+-------------------------------+

   [CREF5]

   HOST_POWER_STATE_OFFLINE
      AP is physically powered off and cannot be awakened by the NCP.

   HOST_POWER_STATE_DEEP_SLEEP
      AP is in a deep low power state and will require a long time to
      wake.  In this state, the NCP MUST NOT send any commands,



Quattlebaum & Woodyatt     Expires May 5, 2018                 [Page 41]

Internet-Draft                 Spinel Core                 November 2017


      including any commands that contain network packets, prior to
      signaling the host explicitly to awaken and receiving a signal to
      update the state to "HOST_POWER_STATE_ONLINE".

   HOST_POWER_STATE_LOW_POWER
      AP is in a low power state and can be awakened quickly.

   HOST_POWER_STATE_ONLINE
      AP is powered for full responsiveness.

   After the AP sends "CMD_PROP_VALUE_SET" for this property with a
   value other than "HOST_POWER_STATE_ONLINE", it SHOULD wait for the
   NCP to acknowledge the property update (with a "CMD_VALUE_IS"
   command) before entering the specified power state.

   Upon the NCP receiving any command when the state is not
   "HOST_POWER_STATE_ONLINE", it MUST silently update the state to the
   "HOST_POWER_STATE_ONLINE" value.

   When the state is not "HOST_POWER_STATE_ONLINE", the NCP *SHOULD NOT*
   send any commands except important notifications that warrant
   awakening the AP host, and the NCP MUST NOT send any informative
   messages on "PROP_DEBUG_STREAM".

   The AP MUST NOT send a value of "HOST_POWER_STATE" other than one of
   the standard codes defined here.  If the NCP receives a value other
   than a standard code, then it SHOULD set the state to
   "HOST_POWER_STATE_LOW_POWER".

   If the NCP has the "CAP_UNSOL_UPDATE_FILTER" capability, any
   unsolicited property updates masked by "PROP_UNSOL_UPDATE_FILTER"
   should be honored while the AP indicates it is in a low-power state.
   After resuming to the "HOST_POWER_STATE_ONLINE" state, the value of
   "PROP_UNSOL_UPDATE_FILTER" MUST be unchanged from the value assigned
   prior to the AP indicating it was entering a low-power state.

   The AP MUST use NLI 0 with commands using this property.  The NCP
   SHOULD explicitly fail to process commands setting this property if
   NLI is not zero.  The operational semantics of this property when NLI
   is not zero are not specified.

8.5.12.  PROP 4104: PROP_UNSOL_UPDATE_FILTER

   o  Type: Multi-Value, Read-Write

   o  Has Item Length Prefix: No

   o  Asynchronous Updates: No



Quattlebaum & Woodyatt     Expires May 5, 2018                 [Page 42]

Internet-Draft                 Spinel Core                 November 2017


   o  Required: OPTIONAL

   o  Scope: NLI

   o  Required Capability: "CAP_UNSOL_UPDATE_FILTER"

   o  Item Type: PUI (Section 2.1)

   o  Units: Enumeration (Property Keys)

   o  Post-Reset Value: Empty

   Contains a list of property IDs which are _excluded_ from generating
   unsolicited value updates.  This property MUST be empty after NCP
   reset.

   In other words, the AP may opt-out of unsolicited property updates
   for a specific property by adding that property id to this list.

   The AP SHOULD NOT add properties to this list which are not present
   in "PROP_UNSOL_UPDATE_LIST".  If such properties are added, the NCP
   MUST ignore the unsupported properties.

   [CREF6]

8.5.13.  PROP 4105: PROP_UNSOL_UPDATE_LIST

   o  Type: Multi-Value, Constant

   o  Has Item Length Prefix: No

   o  Asynchronous Updates: No

   o  Required: OPTIONAL

   o  Scope: NLI

   o  Required Capability: "CAP_UNSOL_UPDATE_FILTER"

   o  Item Type: PUI (Section 2.1)

   o  Units: Enumeration (Property Keys)

   o  Post-Reset Value: Implementation Specific

   Contains a list of properties which are capable of generating
   unsolicited value updates.  This list can be used when populating




Quattlebaum & Woodyatt     Expires May 5, 2018                 [Page 43]

Internet-Draft                 Spinel Core                 November 2017


   "PROP_UNSOL_UPDATE_FILTER" to disable all unsolicited property
   updates.

   The NCP MUST NOT change the value of this property after sending a
   "CMD_VALUE_IS" for "PROP_LAST_STATUS" with any of the
   "STATUS_RESET_xxxxx" status codes.

   Note: not all properties that support unsolicited updates need to be
   listed here.  Some properties, network media scan results for
   example, are only generated due to direct action on the part of the
   AP, so those properties SHOULD NOT not be included in this list.

8.6.  Stream Properties

8.6.1.  PROP 112: PROP_STREAM_DEBUG

   o  Type: Byte-Stream, Output-Only

   o  Required: OPTIONAL

   o  Scope: NCP

   o  Value Type: UTF8 Fragment

   This stream provides human-readable debugging output which may be
   displayed in the AP logs.  It is intended to be treated as a one-way
   virtual serial stream.  The AP MUST NOT assume that each emission of
   this property is self-contained, instead the AP must use newline
   characters for that purpose.

   The location of newline characters MUST NOT not assumed by the AP: it
   is the NCP's responsibility to insert newline characters where
   needed, just like with any other text stream.

   The emitted data is UTF8-encoded without any zero termination.  Note
   that the last UTF8 character MAY possibly be truncated.  If the last
   UTF8 character is truncated, the truncated bytes MUST be the first
   bytes of the next emission from this stream.

8.6.2.  PROP 113: PROP_STREAM_RAW

   o  Type: Packet-Stream, Input/Output

   o  Required: OPTIONAL

   o  Scope: NLI

   o  Related Capabilities:



Quattlebaum & Woodyatt     Expires May 5, 2018                 [Page 44]

Internet-Draft                 Spinel Core                 November 2017


      *  "CAP_WRITABLE_RAW_STREAM": Can be written to if present.

   o  Value Type: Structure

       0                   1                   2                   3
      0 1 2 3 4 5 6 7 8 9 0 1 2 3 4 5 6 7 8 9 0 1 2 3 4 5 6 7 8 9 0 1
     +-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-|-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+
     |   FRAME_LEN (Little endian)   | FRAME_DATA ...
     +-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+
     |   FRAME_METADATA ...
     +-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+

   This stream provides the capability of sending and receiving raw
   packets to and from the network.  The exact format of the frame
   metadata and data is dependent on the MAC and PHY being used.

   Implementations MAY support the ability to transmit arbitrary raw
   packets.  Support for this feature is indicated by the presence of
   the "CAP_WRITABLE_RAW_STREAM" capability.

   If the capability "CAP_WRITABLE_RAW_STREAM" is set, then packets
   written to this stream with "CMD_PROP_VALUE_SET" will be sent out
   over the radio.  This allows the caller to use the network directly,
   with the full network layer stack being implemented on the AP instead
   of the NCP.

8.6.2.1.  Frame Metadata Format

   Any data past the end of "FRAME_DATA" is considered metadata and is
   OPTIONAL.  Frame metadata MAY be empty or partially specified.  The
   operational semantics of using frame metadata is not specified in the
   core protocol.

8.6.3.  PROP 114: PROP_STREAM_NET

   o  Type: Packet-Stream, Input/Output

   o  Required: REQUIRED

   o  Scope: NLI

   o  Value Type: Structure

   o  See Also: Section 8.6.4







Quattlebaum & Woodyatt     Expires May 5, 2018                 [Page 45]

Internet-Draft                 Spinel Core                 November 2017


       0                   1                   2                   3
      0 1 2 3 4 5 6 7 8 9 0 1 2 3 4 5 6 7 8 9 0 1 2 3 4 5 6 7 8 9 0 1
     +-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-|-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+
     |   FRAME_LEN (Little endian)   | FRAME_DATA ...
     +-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+
     |   FRAME_METADATA ...
     +-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+

   This stream provides the capability of sending and receiving data
   packets to and from the currently attached network.

   Any data past the end of "FRAME_LEN" is considered metadata, the
   format of which is described in Section 8.6.2.1.

8.6.4.  PROP 115: PROP_STREAM_NET_INSECURE

   o  Type: Packet-Stream, Input/Output

   o  Required: REQUIRED

   o  Scope: NLI

   o  Value Type: Structure

   o  See Also: Section 8.6.3

   The structure of the value of this property is identical to that of
   PROP_STREAM_NET (Section 8.6.3).

   This stream provides the capability of sending and receiving
   plaintext non-authenticated data packets to and from the currently
   attached network.

8.7.  PHY Properties

8.7.1.  PROP 32: PROP_PHY_ENABLED

   o  Type: Single-Value, Read/Write

   o  Asynchronous Updates: No

   o  Required:

      *  "CMD_PROP_VALUE_GET": REQUIRED

      *  "CMD_PROP_VALUE_SET": *RECOMENDED*

   o  Scope: NLI



Quattlebaum & Woodyatt     Expires May 5, 2018                 [Page 46]

Internet-Draft                 Spinel Core                 November 2017


   o  Related Capabilities:

      *  "CAP_MAC_RAW" required to use "CMD_PROP_VALUE_SET"

   o  Value Type: BOOL

   o  Post-Reset Value: 0 (false)

   Set to 1 if the PHY is enabled, set to 0 otherwise.  May be directly
   enabled to bypass higher-level packet processing in order to
   implement things like packet sniffers.  This property can only be
   written if the "SPINEL_CAP_MAC_RAW" capability is present.

8.7.2.  PROP 33: PROP_PHY_CHAN

   o  Type: Single-Value, Read-Write

   o  Asynchronous Updates: No

   o  Required: REQUIRED

   o  Value Type: UINT8

   o  Units: Channel Index

   o  Post-Reset Value: Unspecified

   o  See Also: (Section 8.7.3)

   Value is the current channel index.  Must be set to one of the values
   contained in "PROP_PHY_CHAN_SUPPORTED".  m

8.7.3.  PROP 34: PROP_PHY_CHAN_SUPPORTED

   o  Type: Multiple-Value, Constant

   o  Has Item Length Prefix: No

   o  Asynchronous Updates: No

   o  Required: REQUIRED

   o  Item Type: UINT8

   o  Units: Channel Index

   o  See Also: (Section 8.7.2)




Quattlebaum & Woodyatt     Expires May 5, 2018                 [Page 47]

Internet-Draft                 Spinel Core                 November 2017


   Value is a list of channel indexes that are supported by the NCP.

8.7.4.  PROP 35: PROP_PHY_FREQ

   o  Type: Single-Value, Read-Only

   o  Asynchronous Updates: No

   o  Required: REQUIRED

   o  Scope: NLI

   o  Value Type: UINT32_LE

   o  Units: kHz

   o  Post-Reset Value: Unspecified

   o  See Also: (Section 8.7.2)

   Value is the radio frequency (in kilohertz) of the current channel.

8.7.5.  PROP 36: PROP_PHY_CCA_THRESHOLD

   o  Type: Single-Value, Read-Write

   o  Asynchronous Updates: No

   o  Required: OPTIONAL

   o  Value Type: INT8

   o  Unit: dB (RF Power)

   o  Post-Reset Value: Implementation Specified

   Value is the CCA (clear-channel assessment) threshold.  Set to -128
   to disable.

   The specific meaning of zero dB is implementation-specific, but MUST
   be consistant with definitions of other properties that express
   power.  It is RECOMMENDED that zero dB represent one milliwatt of
   power (0dBm), as measured from the antenna connector.

   When setting, the value SHOULD be rounded down to a value that is
   supported by the underlying radio hardware.





Quattlebaum & Woodyatt     Expires May 5, 2018                 [Page 48]

Internet-Draft                 Spinel Core                 November 2017


8.7.6.  PROP 37: PROP_PHY_TX_POWER

   o  Type: Single-Value, Read-Write

   o  Asynchronous Updates: No

   o  Required: REQUIRED

   o  Value Type: INT8

   o  Unit: dB (RF Power)

   o  Post-Reset Value: 0dB RECOMMENDED

   Value is the maximum transmit power the network stack is allowed to
   set the radio to, measured in decibels.

   The specific meaning of zero dB is implementation-specific, but MUST
   be consistant with definitions of other properties that express
   power.  It is RECOMMENDED that zero dB represent one milliwatt of
   power (0dBm), as measured from the antenna connector.

   When setting, the value SHOULD be rounded down to a value that is
   supported by the underlying radio hardware.

8.7.7.  PROP 38: PROP_PHY_RSSI

   o  Type: Single-Value, Read-Only

   o  Asynchronous Updates: No

   o  Required: REQUIRED

   o  Value Type: INT8

   o  Unit: dB (RF Power)

   o  Post-Reset Value: Unspecified

   Value is the current RSSI (Received Signal Strength Indication) from
   the radio.  This value can be used in energy scans and for
   determining the ambient noise floor for the operating environment.

   The specific meaning of zero dB is implementation-specific, but MUST
   be consistant with definitions of other properties that express
   power.  It is RECOMMENDED that zero dB represent one milliwatt of
   power (0dBm), as measured from the antenna connector.




Quattlebaum & Woodyatt     Expires May 5, 2018                 [Page 49]

Internet-Draft                 Spinel Core                 November 2017


8.7.8.  PROP 39: PROP_PHY_RX_SENSITIVITY

   o  Type: Single-Value, Constant

   o  Asynchronous Updates: No

   o  Required: OPTIONAL

   o  Value Type: INT8

   o  Unit: dB

   Value is the radio receive sensitivity.  This value can be used as
   lower bound noise floor for link metrics computation.

   The specific meaning of zero dB is implementation-specific, but MUST
   be consistant with definitions of other properties that express
   power.  It is RECOMMENDED that zero dB represent one milliwatt of
   power (0dBm), as measured from the antenna connector.

8.8.  MAC Properties

8.8.1.  PROP 48: PROP_MAC_SCAN_STATE

   o  Type: Single-Value, Read-Write

   o  Asynchronous Updates: Yes

   o  Required: REQUIRED

   o  Value Type: UINT8

   o  Units: Enumeration

   o  Post-Reset Value: "SCAN_STATE_IDLE"

                       +----+---------------------+
                       | Id |         Name        |
                       +----+---------------------+
                       | 0  |  "SCAN_STATE_IDLE"  |
                       | 1  | "SCAN_STATE_BEACON" |
                       | 2  | "SCAN_STATE_ENERGY" |
                       +----+---------------------+

                        Enumeration of scan states

   SCAN_STATE_IDLE




Quattlebaum & Woodyatt     Expires May 5, 2018                 [Page 50]

Internet-Draft                 Spinel Core                 November 2017


      Indicates that the scanning subsystem is not currently scanning.
      You can set the scan state to this value to cancel a scan in
      progress.

   SCAN_STATE_BEACON
      Indicates that the scanning subsystem is performing an active scan
      for nearby networks.  You can start an active scan by setting the
      scan state to this value.

   SCAN_STATE_ENERGY
      Indicates that the scanning subsystem is performing a passive scan
      to determine RF energy levels.  You can start a passive scan by
      setting the scan state to this value.

   The scan is complete when the NCP has indicated that the value of has
   changed to "SCAN_STATE_IDLE".

   If an attempt to set this property to a value of anything other than
   "SCAN_STATE_IDLE" while the current value isn't "SCAN_STATE_IDLE",
   the NCP MUST fail and respond with a last status of "STATUS_ALREADY".
   However, setting this property to "SCAN_STATE_IDLE" while it is
   already "SCAN_STATE_IDLE" MUST NOT be considered an error.

8.8.2.  PROP 49: PROP_MAC_SCAN_MASK

   o  Type: Multiple-Value, Read-Write

   o  Has Item Length Prefix: No

   o  Asynchronous Updates: No

   o  Required: REQUIRED

   o  Item Type: UINT8

   o  Units: Channel Index

   o  Post-Reset Value: Same as "PROP_PHY_CHAN_SUPPORTED"

   This property contains the list of channels that will be scanned.

   Setting this property to be empty MUST reinitialize it with the
   contents of "PROP_PHY_CHAN_SUPPORTED".








Quattlebaum & Woodyatt     Expires May 5, 2018                 [Page 51]

Internet-Draft                 Spinel Core                 November 2017


8.8.3.  PROP 50: PROP_MAC_SCAN_PERIOD

   o  Type: Single-Value, Read-Write

   o  Asynchronous Updates: No

   o  Required: RECOMMENDED

   o  Value Type: UINT16_LE

   o  Unit: milliseconds per channel

   o  Post-Reset Value: 100ms RECOMMENDED

   Number of milliseconds that the scan should wait per channel for
   beacons or for collecting energy samples.

8.8.4.  PROP 51: PROP_MAC_SCAN_BEACON

   o  Type: Packet-Stream, Output-Only

   o  Asynchronous Updates: Yes

   o  Required: REQUIRED

   o  Scope: NLI

   o  Value Type: Structure

       0                   1                   2                   3
      0 1 2 3 4 5 6 7 8 9 0 1 2 3 4 5 6 7 8 9 0 1 2 3 4 5 6 7 8 9 0 1
     +-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+
     |    CHANNEL    |      RSSI     | MAC_LEN(Bytes, Little endian) |
     +-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+
     |   MAC_DATA ...
     +-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+
     | NET_LEN(Bytes, Little endian) | NET_DATA ...
     +-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+

   Scan beacons have two embedded structures which contain information
   about the MAC layer and the NET layer.  Their format depends on the
   MAC and NET layer currently in use.

   For example, in an 802.15.4 PHY (identified by "CAP_MAC_802_15_4"),
   "MAC_DATA" would be formatted as follows:






Quattlebaum & Woodyatt     Expires May 5, 2018                 [Page 52]

Internet-Draft                 Spinel Core                 November 2017


       0                   1                   2                   3
      0 1 2 3 4 5 6 7 8 9 0 1 2 3 4 5 6 7 8 9 0 1 2 3 4 5 6 7 8 9 0 1
     +-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+
     |                      EUI-64 (Upper word) ...                  :
     +-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+
     :                  ... EUI-64 (Lower word)                      |
     +-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+
     |  SHORT_ADDR (Little Endian)   |     PAN_ID (Little Endian)    |
     +-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+
     |      LQI      |
     +-+-+-+-+-+-+-+-+

   For the standard network layer (identified by "CAP_NET_STANDARD"),
   the "NET_DATA" formatted as follows:

       0                   1                   2                   3
      0 1 2 3 4 5 6 7 8 9 0 1 2 3 4 5 6 7 8 9 0 1 2 3 4 5 6 7 8 9 0 1
     +-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+
     |        PROTOCOL (PUI, three-bytes shown)      |     FLAGS     |
     +-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+
     |   NETWORK_NAME (UTF8) ...
     +-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+
     |0 0 0 0 0 0 0 0|   XPANID_LEN (Little endian)  | XPANID ...
     +-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-|-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+
     |  STEERING_LEN(Little endian)  | STEERING_DATA ...
     +-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+

   Extra parameters may be added to each of the structures in the
   future, so care should be taken to read the length that prepends each
   structure.

   The RSSI is measured in dB.  The specific meaning of zero dB is
   implementation-specific, but MUST be consistant with definitions of
   other properties that express power.  It is RECOMMENDED that zero dB
   represent one milliwatt of power (0dBm), as measured from the antenna
   connector.

8.8.5.  PROP 52: PROP_MAC_15_4_LADDR

   o  Type: Single-Value, Read-Write

   o  Asynchronous Updates: No

   o  Required: REQUIRED with "CAP_MAC_802_15_4"

   o  Value Type: EUI64_BE

   o  Required Capability: "CAP_MAC_802_15_4"



Quattlebaum & Woodyatt     Expires May 5, 2018                 [Page 53]

Internet-Draft                 Spinel Core                 November 2017


   o  Post-Reset Value: Tehnology-dependent.  MAY be "PROP_HWADDR" or
      randomly generated.

   [CREF7]

   The 802.15.4 long (extended) address of this node.

   This property is only present on NCPs which implement 802.15.4

8.8.6.  PROP 53: PROP_MAC_15_4_SADDR

   o  Type: Single-Value, Read-Write

   o  Asynchronous Updates: No

   o  Required:

      *  "CMD_PROP_VALUE_GET": REQUIRED with "CAP_MAC_802_15_4"

      *  "CMD_PROP_VALUE_SET": RECOMMENDED with "CAP_MAC_802_15_4"

   o  Required Capability: "CAP_MAC_802_15_4"

   o  Value Type: UINT16_LE

   o  Post-Reset Value: 65535 (0xFFFF)

   [CREF8]

   The 802.15.4 short address of this node.

   This property is only present on NCPs which implement 802.15.4

8.8.7.  PROP 54: PROP_MAC_15_4_PANID

   o  Type: Single-Value, Read-Write

   o  Asynchronous Updates: No

   o  Required:

      *  "CMD_PROP_VALUE_GET": REQUIRED with "CAP_MAC_802_15_4"

      *  "CMD_PROP_VALUE_SET": RECOMMENDED with "CAP_MAC_802_15_4"

   o  Required Capability: "CAP_MAC_802_15_4"

   o  Value Type: UINT16_LE



Quattlebaum & Woodyatt     Expires May 5, 2018                 [Page 54]

Internet-Draft                 Spinel Core                 November 2017


   o  Post-Reset Value: 65535 (0xFFFF)

   [CREF9]

   The 802.15.4 PANID this node is associated with.

   This property is only present on NCPs which implement 802.15.4

8.8.8.  PROP 55: PROP_MAC_RAW_STREAM_ENABLED

   o  Type: Single-Value, Read-Write

   o  Asynchronous Updates: No

   o  Required: RECOMMENDED

   o  Value Type: BOOL

   o  Post-Reset Value: 0 (false)

   o  See also: (Section 8.6.2)

   Set to true to enable raw MAC frames to be emitted from
   "PROP_STREAM_RAW".  This allows for raw packet sniffers to be
   implemented.

8.8.9.  PROP 56: PROP_MAC_PROMISCUOUS_MODE

   o  Type: Single-Value, Read-Write

   o  Asynchronous Updates: No

   o  Required: RECOMMENDED

   o  Value Type: UINT8

   o  Units: Enumeration

   o  Post-Reset Value: "MAC_PROMISCUOUS_MODE_OFF"

   Possible Values:










Quattlebaum & Woodyatt     Expires May 5, 2018                 [Page 55]

Internet-Draft                 Spinel Core                 November 2017


   +----+--------------------------------+-----------------------------+
   | Id |              Name              |         Description         |
   +----+--------------------------------+-----------------------------+
   | 0  |   "MAC_PROMISCUOUS_MODE_OFF"   |  Normal MAC filtering is in |
   |    |                                |            place.           |
   | 1  | "MAC_PROMISCUOUS_MODE_NETWORK" |   All MAC packets matching  |
   |    |                                |  network are passed up the  |
   |    |                                |            stack.           |
   | 2  |  "MAC_PROMISCUOUS_MODE_FULL"   | All decoded MAC packets are |
   |    |                                |     passed up the stack.    |
   +----+--------------------------------+-----------------------------+

   See Section 8.6.2.

8.8.10.  PROP 57: PROP_MAC_ENERGY_SCAN_RESULT

   o  Type: Packet-Stream, Output-Only

   o  Required: REQUIRED

   o  Value Type: UINT8, INT8

   o  Units: Channel Index, dB (RF Power)

                       0                   1
                      0 1 2 3 4 5 6 7 8 9 0 1 2 3 4 5
                     +-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+
                     |    CHANNEL    |      RSSI     |
                     +-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+

   This property is emitted during energy scan operation
   (SCAN_STATE_ENERGY) once per scanned channel.

   The RSSI is measured in dB.  The specific meaning of zero dB is
   implementation-specific, but MUST be consistant with definitions of
   other properties that express power.  It is RECOMMENDED that zero dB
   represent one milliwatt of power (0dBm), as measured from the antenna
   connector.

8.8.11.  PROP 58: PROP_MAC_DATA_POLL_PERIOD

   o  Type: Single-Value, Read-Write

   o  Asynchronous Updates: No

   o  Required: OPTIONAL

   o  Value Type: UINT32_LE



Quattlebaum & Woodyatt     Expires May 5, 2018                 [Page 56]

Internet-Draft                 Spinel Core                 November 2017


   o  Unit: milliseconds

   o  Post-Reset Value: 5000ms RECOMMENDED

   o  Required Capability: "CAP_POWER_SAVE"

   o  See Also: Section 8.5.8

   The (user-specified) data poll (802.15.4 MAC Data Request) period in
   milliseconds.  Value zero means the poll period will be calculated by
   the stack to be the maximum interval acceptable by the parent.  If
   the maximum poll interval is longer than the maximum interval
   acceptable by the parent, the later value is used instead.

   The value of this property is only used if "PROP_POWER_STATE" is set
   to "POWER_STATE_LOW_POWER".  In all other states, the value of this
   property is ignored.

   This property is only used on NCPs which support
   "POWER_STATE_LOW_POWER".

8.8.12.  PROP 4864: PROP_MAC_WHITELIST

   o  Type: Multi-Value, Read-Write

   o  Asynchronous Updates: No

   o  Per-Item Length: No

   o  Required: OPTIONAL

   o  Required Capability: "CAP_MAC_WHITELIST"

   o  Item Type: EUI64_BE, UINT8

   o  Post-Reset Value: empty

   o  See Also: Section 8.8.13

   TODO(RQ): Consider moving this to the debug section.

   When whitelisting is enabled, this property prevents the device from
   being able to communicate with devices which are not in this list.
   Also, if the RSSI field is not 127, the given RSSI value will always
   be reported instead of using the RSSI from the radio hardware.

   This property is intended to facilitate stack testing and debugging
   and SHOULD NOT be used in production.



Quattlebaum & Woodyatt     Expires May 5, 2018                 [Page 57]

Internet-Draft                 Spinel Core                 November 2017


   Item Format:

       0                   1                   2                   3
      0 1 2 3 4 5 6 7 8 9 0 1 2 3 4 5 6 7 8 9 0 1 2 3 4 5 6 7 8 9 0 1
     +-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+
     |                      EUI64 (Upper word) ...                   :
     +-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+
     :                  ... EUI64 (Lower word)                       |
     +-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+
     |     RSSI      |
     +-+-+-+-+-+-+-+-+

   EUI64
      EUI64 address of node

   RSSI
      Optional RSSI-override value.  The value 127 indicates that the
      RSSI-override feature is not enabled for this address.  If this
      value is omitted when setting or inserting, it is assumed to be
      127.  This parameter is ignored when removing and may be omitted.

8.8.13.  PROP 4865: PROP_MAC_WHITELIST_ENABLED

   o  Type: Single-Value, Read-Write

   o  Asynchronous Updates: No

   o  Required: OPTIONAL

   o  Required capability: "CAP_MAC_WHITELIST"

   o  Value Type: BOOL

   o  Post-Reset Value: 0 (false)

   o  See Also: Section 8.8.12

   TODO(RQ): Consider moving this to the debug section.

   Setting this to true SHALL cause "PROP_MAC_BLACKLIST_ENABLED" to be
   automatically set to false.

8.8.14.  PROP 4870: PROP_MAC_BLACKLIST

   o  Type: Multi-Value, Read-Write

   o  Asynchronous Updates: No




Quattlebaum & Woodyatt     Expires May 5, 2018                 [Page 58]

Internet-Draft                 Spinel Core                 November 2017


   o  Per-Item Length: No

   o  Required: OPTIONAL

   o  Required Capability: "CAP_MAC_WHITELIST"

   o  Item Type: EUI64_BE

   o  Post-Reset Value: empty

   o  See Also: Section 8.8.15

   TODO(RQ): Consider moving this to the debug section.

   When blacklisting is enabled, this property prevents the device from
   being able to communicate with devices which are in this list.

8.8.15.  PROP 4871: PROP_MAC_BLACKLIST_ENABLED

   o  Type: Single-Value, Read-Write

   o  Asynchronous Updates: No

   o  Required: OPTIONAL

   o  Value Type: BOOL

   o  Post-Reset Value: 0 (false)

   o  Required capability: "CAP_MAC_WHITELIST"

   o  See Also: Section 8.8.14

   TODO(RQ): Consider moving this to the debug section.

   Setting this to true SHALL cause "PROP_MAC_WHITELIST_ENABLED" to be
   automatically set to false.

8.8.16.  PROP 4867: PROP_MAC_SRC_MATCH_ENABLED

   o  Type: Single-Value, Read-Write

   o  Asynchronous Updates: No

   o  Required: OPTIONAL

   o  Required Capabilities: "CAP_MAC_RAW", "CAP_MAC_802_15_4"




Quattlebaum & Woodyatt     Expires May 5, 2018                 [Page 59]

Internet-Draft                 Spinel Core                 November 2017


   o  Value Type: BOOL

   o  Post-Reset Value: 0 (false)

   o  See Also: Section 8.8.17, Section 8.8.18

   Set to true to enable radio source matching or false to disable it.
   The source match functionality is used by radios when generating
   ACKs.  The short and extended address lists are used for settings the
   Frame Pending bit in the ACKs.

8.8.17.  PROP 4868: PROP_MAC_SRC_MATCH_SHORT_ADDRESSES

   o  Type: Multi-Value, Read-Write

   o  Asynchronous Updates: No

   o  Per-Item Length: No

   o  Required: OPTIONAL

   o  Item Type: UINT16_LE

   o  Post-Reset Value: empty

   o  Required Capabilities: "CAP_MAC_RAW", "CAP_MAC_802_15_4"

   o  See Also: Section 8.8.16

   Configures the list of short addresses used for source matching.
   These short address are used for hardware generated ACKs.

8.8.18.  PROP 4869: PROP_MAC_SRC_MATCH_EXTENDED_ADDRESSES

   o  Type: Multi-Value, Read-Write

   o  Asynchronous Updates: No

   o  Per-Item Length: No

   o  Required: OPTIONAL

   o  Item Type: EUI64_BE

   o  Post-Reset Value: empty

   o  Required Capabilities: "CAP_MAC_RAW", "CAP_MAC_802_15_4"




Quattlebaum & Woodyatt     Expires May 5, 2018                 [Page 60]

Internet-Draft                 Spinel Core                 November 2017


   o  See Also: Section 8.8.16

   Configures the list of long addresses used for source matching.
   These long address are used for hardware generated ACKs.

8.9.  NET Properties

8.9.1.  PROP 65: PROP_NET_IF_UP

   o  Type: Single-Value, Read/Write

   o  Asynchronous Updates: Yes

   o  Scope: NLI

   o  Required: REQUIRED

   o  Value Type: BOOL

   o  Post-Reset Value: 0 (false)

   Network interface up/down status.  Non-zero (set to 1) indicates up,
   zero indicates down.

   Setting this to false implies also setting "PROP_NET_STACK_UP" to
   false.

8.9.1.1.  Relationship with PROP_NET_STACK_UP

   EDITOR: the examples show that the order of operations to bring up a
   network interface is first set PROP_NET_IF_UP=TRUE, then
   PROP_NET_STACK_UP=TRUE.  What does it mean when PROP_NET_IF_UP=TRUE
   and PROP_NET_STACK_UP=FALSE?  Does the NLI matter in operations with
   the PROP_NET_STACK_UP property?

   RQ: PROP_NET_IF_UP=TRUE, PROP_NET_STACK_UP=FALSE is used for in-band
   commissioning.  It bring up link-local IPv6 capabilities on
   PROP_STREAM_NET_INSECURE.

8.9.2.  PROP 66: PROP_NET_STACK_UP

   o  Type: Single-Value, Read/Write

   o  Asynchronous Updates: Yes

   o  Scope: NLI

   o  Required: REQUIRED



Quattlebaum & Woodyatt     Expires May 5, 2018                 [Page 61]

Internet-Draft                 Spinel Core                 November 2017


   o  Value Type: BOOL

   o  Post-Reset Value: 0 (false)

   Network protocol stack operational status.  Non-zero (set to 1)
   indicates up, zero indicates down.

   Setting this to true implies also setting "PROP_NET_IF_UP" to true.

8.9.3.  PROP 67: PROP_NET_ROLE

   o  Type: Single-Value, Read-Only

   o  Asynchronous Updates: Yes

   o  Scope: NLI

   o  Required: REQUIRED

   o  Value Type: UINT8

   o  Unit: Enumeration

   o  Post-Reset Value: 0 ("NET_ROLE_DETACHED")

   Indicates what role the current device is playing on the network.
   This property is read-only, with the exception that the AP can
   indicate that it wants the NCP to detach and then attempt to reattach
   by setting this property to "NET_ROLE_DETACHED" when it was
   previously set to another value.  Attempting to set this property to
   any other value will result in "STATUS_INVALID_ARGUMENT" being
   emitted.

                      +------+---------------------+
                      | Code |         Name        |
                      +------+---------------------+
                      |  0   | "NET_ROLE_DETACHED" |
                      |  1   |   "NET_ROLE_CHILD"  |
                      |  2   |  "NET_ROLE_ROUTER"  |
                      |  3   |  "NET_ROLE_LEADER"  |
                      |  4   |   "NET_ROLE_PEER"   |
                      +------+---------------------+

   NET_ROLE_DETACHED
      The NCP is not currently participating on a network, or is in the
      process of attaching to a network.

   NET_ROLE_CHILD



Quattlebaum & Woodyatt     Expires May 5, 2018                 [Page 62]

Internet-Draft                 Spinel Core                 November 2017


      The NCP is currently attached to the mesh network as a child to a
      router node.  Communication with nodes more than one hop away is
      possible.  The NCP does not route any mesh traffic on the behalf
      of other nodes.

   NET_ROLE_ROUTER
      The NCP is currently a router node on the network, and will
      transparently route mesh traffic on behalf of other nodes.

   NET_ROLE_LEADER
      This role is identical ot "NET_ROLE_ROUTER" except that there is
      only node designated as the leader per partition.  This role is
      Thread-specific.

   NET_ROLE_PEER
      In this role, the NCP may communicate with nodes which are no more
      than one hop away.  This role is used while obtaining the network
      provision during in-band commissioning.

8.9.4.  PROP 68: PROP_NET_NETWORK_NAME

   o  Type: Single-Value, Read-Write

   o  Asynchronous Updates: Yes

   o  Scope: NLI

   o  Required: REQUIRED for "CAP_NET_STANDARD"

   o  Value Type: Zero-terminated UTF8 String

   o  Post-Reset Value: Empty

   Contains a _zero-terminated_ UTF8 string which describes the name of
   the current network.  This is analogous to the SSID in 802.11.  The
   maximum length of the string is technology specific.  Setting this
   property to a value that is too large MUST cause
   "STATUS_PROP_VALUE_TOO_BIG" to be emitted.

   When this value is being retrieved, all trailing zero bytes in the
   network name MUST be stripped by the NCP.  When this value is being
   set, all trailing zero bytes SHOULD be stripped by the AP.

   See Section 9.1 for security considerations regarding UTF8
   normalization.






Quattlebaum & Woodyatt     Expires May 5, 2018                 [Page 63]

Internet-Draft                 Spinel Core                 November 2017


   This property SHOULD only be changed by the AP when
   "PROP_NET_STACK_UP" is false.  The behavior of changing this property
   when "PROP_NET_STACK_UP" is true is unspecified.

8.9.5.  PROP 69: PROP_NET_XPANID

   o  Type: Single-Value, Read-Write

   o  Asynchronous Updates: Yes

   o  Scope: NLI

   o  Required: REQUIRED for "CAP_NET_STANDARD"

   o  Value Type: Eight (8) bytes of opaque data

   o  Post-Reset Value: All zeros

   Contains the extended personal-area network identifier for the
   current network.  It allows for different networks with identical
   names to not conflict with each other.  It is defined to be eight
   bytes long.

   This property is not used by all network technologies.  In cases
   where it is not used, both "CMD_PROP_VALUE_GET" and
   "CMD_PROP_VALUE_SET" calls should return with an "CMD_PROP_VALUE_IS"
   for this property with a value of all zeros.

   This property SHOULD only be changed by the AP when
   "PROP_NET_STACK_UP" is false.  The behavior of changing this property
   when "PROP_NET_STACK_UP" is true is unspecified.

8.9.6.  PROP 70: PROP_NET_MASTER_KEY

   o  Type: Single-Value, Read-Write

   o  Asynchronous Updates: Yes

   o  Scope: NLI

   o  Required: REQUIRED for "CAP_NET_STANDARD"

   o  Value Type: Cryptographic key (usually 16 bytes)

   o  Post-Reset Value: Unspecified value that is the length required by
      the underlying network technology.





Quattlebaum & Woodyatt     Expires May 5, 2018                 [Page 64]

Internet-Draft                 Spinel Core                 November 2017


   Master key material.  The exact length of the value for this property
   is defined by the technology, but is generally 16-bytes (128-bit).

   *This is not a password*, it is the raw cryptographic key used to
   authenticate this node to other nodes on the network and (possibly)
   to secure network traffic.  It must be generated from either a
   cryptographically-secure random number generator or the output of a
   suitable password-based key derivation funciton (the specification of
   which would be network technology dependent).

   If the AP attempts to set a master key of a length that is not a
   supported by the underlying technology, the NCP MUST fail with
   "STATUS_INVALID_ARGUMENT".

   Network technologies which support unsecured/unauthenticated
   operation MAY allow this property to be cleared to be empty.

   This property SHOULD only be changed by the AP when
   "PROP_NET_STACK_UP" is false.  The behavior of changing this property
   when "PROP_NET_STACK_UP" is true is unspecified.

8.9.7.  PROP 71: PROP_NET_KEY_SEQUENCE_COUNTER

   o  Type: Single-Value, Read-Write

   o  Asynchronous Updates: No

   o  Scope: NLI

   o  Required: REQUIRED for "CAP_NET_STANDARD"

   o  Value Type: UINT32_LE

   o  Post-Reset Value: 0

   This property is not used by all network technologies.  In cases
   where it is not used, both "CMD_PROP_VALUE_GET" and
   "CMD_PROP_VALUE_SET" calls should return with an "CMD_PROP_VALUE_IS"
   for this property with a value of zero (0).

   This property SHOULD only be changed by the AP when
   "PROP_NET_STACK_UP" is false.  The behavior of changing this property
   when "PROP_NET_STACK_UP" is true is unspecified.








Quattlebaum & Woodyatt     Expires May 5, 2018                 [Page 65]

Internet-Draft                 Spinel Core                 November 2017


8.9.8.  PROP 72: PROP_NET_PARTITION_ID

   o  Type: Single-Value, Read-Only

   o  Asynchronous Updates: Yes

   o  Scope: NLI

   o  Required: REQUIRED for "CAP_NET_STANDARD"

   o  Value Type: UINT32_LE

   o  Post-Reset Value: 0

   The partition ID of the partition that this node is a member of.

   This property is not used by all network technologies.  In cases
   where it is not used, "CMD_PROP_VALUE_GET" calls should return with
   an "CMD_PROP_VALUE_IS" for this property with a value of zero (0).

8.9.9.  PROP 73: PROP_NET_REQUIRE_JOIN_EXISTING

   o  Type: Single-Value, Read-Write

   o  Asynchronous Updates: Yes

   o  Scope: NLI

   o  Required: REQUIRED for "CAP_NET_STANDARD"

   o  Value Type: BOOL

   o  Post-Reset Value: 0 (false)

   This property is used to force the NLI to fail hard (as opposed to
   creating a new partition) if there are no nodes in radio range on the
   same network.  This is useful when joining a network for the first
   time to ensure that there was no errors or mistakes in the provision.

   To use this property, the AP follows these steps:

   1.  Provisions the NLI for the network by setting all of the required
       properties (technology-specific).

   2.  Sets "PROP_NET_REQUIRE_JOIN_EXISTING" to true.

   3.  Sets "PROP_NET_STACK_UP" to true.




Quattlebaum & Woodyatt     Expires May 5, 2018                 [Page 66]

Internet-Draft                 Spinel Core                 November 2017


   Upon successful association with another nearby node, the NLI sends
   the AP an asynchronous update setting
   "PROP_NET_REQUIRE_JOIN_EXISTING" to false.

   If there were no nearby nodes, the NLI sends the AP several
   asynchronous updates in the following order with a TID of zero:

   o  "PROP_NET_STACK_UP" IS false

   o  "PROP_NET_IF_UP" IS false

   o  "PROP_NET_LAST_STATUS" IS ...

      *  "STATUS_JOIN_FAIL_SECURITY"

      *  "STATUS_JOIN_FAIL_LONELY"

      *  "STATUS_JOIN_FAIL_OTHER"

8.10.  IPv6 Properties

8.10.1.  PROP 96: PROP_IPV6_LL_ADDR

   o  Type: Single-Value, Read-Write

   o  Asynchronous Updates: Yes

   o  Required: REQUIRED

   o  Scope: NLI

   o  Value Type: IPv6 Address

   o  Post-Reset Value: Unspecified

8.10.2.  PROP 99: PROP_IPV6_ADDR_TABLE

   o  Type: Multiple-Value, Read-Write

   o  Has Item Length Prefix: Yes

   o  Asynchronous Updates: Yes

   o  Required: REQUIRED

   o  Scope: NLI

   o  Item Type: Structure



Quattlebaum & Woodyatt     Expires May 5, 2018                 [Page 67]

Internet-Draft                 Spinel Core                 November 2017


   o  Post-Reset Value: Empty

       0                   1                   2                   3
      0 1 2 3 4 5 6 7 8 9 0 1 2 3 4 5 6 7 8 9 0 1 2 3 4 5 6 7 8 9 0 1
     +-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+
     |                                                               |
     +-                                                             -+
     |                                                               |
     +-                        IPv6 ADDRESS                         -+
     |                                                               |
     +-                                                             -+
     |                                                               |
     +-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+
     | PREFIX LENGTH |              VALID LIFETIME...
     +-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+
       ...           |            PREFERRED LIFETIME...
     +-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+
       ...           |     FLAGS     |
     +-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+

                     PROP_IPV6_ADDRESS_TABLE structure

   This property provides the table of all of the unicast IPv6 addresses
   associated with this NLI.

   TODO: This needs a lot of work.

   EDITOR: this conflates the IPv6 interface address list with the IPv6
   on-link prefix used in IPv6 Neighbor Discovery and other address
   reservation and resolution protocols with similar function, e.g.
   Thread(R).  It probably makes sense to create an additional set of
   properties that represent neighbor discovery and router discovery
   parameters.

   EDITOR: the operational semantics of the Flags field is not well-
   specified.

8.10.3.  PROP 101: PROP_IPv6_ICMP_PING_OFFLOAD

   o  Type: Single-Value, Read-Write

   o  Asynchronous Updates: No

   o  Required: OPTIONAL

   o  Scope: NLI

   o  Value Type: BOOL



Quattlebaum & Woodyatt     Expires May 5, 2018                 [Page 68]

Internet-Draft                 Spinel Core                 November 2017


   o  Post-Reset Value: 0 (false)

   Allow the NCP to directly respond to ICMP ping requests.  If this is
   turned on, ICMP echo request packets will not be passed to the AP.

8.10.4.  PROP 102: PROP_IPV6_MULTICAST_ADDR_TABLE

   o  Type: Multiple-Value, Read-Write

   o  Has Item Length Prefix: Yes

   o  Asynchronous Updates: Yes

   o  Required: REQUIRED

   o  Scope: NLI

   o  Item Type: IPv6

   o  Post-Reset Value: Implemenation specific

8.11.  RETHINK IPv6 Properties

   This section is discussing a possible renumbering/reorganization of
   the IPv6 section.

8.11.1.  PROP XXXX: PROP_IPV6_UCAST_ADDRS

   o  Type: Multiple-Value, Read-Only

   o  Has Item Length Prefix: Yes

   o  Asynchronous Updates: Yes

   o  Required: REQUIRED

   o  Scope: NLI

   o  Item Type: Structure

   o  Post-Reset Value: Empty










Quattlebaum & Woodyatt     Expires May 5, 2018                 [Page 69]

Internet-Draft                 Spinel Core                 November 2017


       0                   1                   2                   3
      0 1 2 3 4 5 6 7 8 9 0 1 2 3 4 5 6 7 8 9 0 1 2 3 4 5 6 7 8 9 0 1
     +-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+
     |                                                               |
     +-                                                             -+
     |                                                               |
     +-                        IPv6 ADDRESS                         -+
     |                                                               |
     +-                                                             -+
     |                                                               |
     +-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+
     |     SCOPE     |             FLAGS             |
     +-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+

                    Structure of PROP_IPV6_UCAST_ADDRS

   This property contains all unicast IPv6 addresses currently assigned
   to this NLI.  This includes both automatically assigned addresses and
   addresses manually added by the AP via "PROP_IPV6_HOST_UCAST_ADDRS".

   The AP cannot directly manipulate this property. but it can add new
   unicast IPv6 addresses via the "PROP_IPV6_HOST_ON_LINK_PREFIXES"
   property.

   SCOPE
      An enumeration describing the scope of the address.  Can be link-
      local, mesh-local, site-local, or global.  (TODO: Enumeration TBD)

   FLAGS
      Flags describing various properties of the address.  Flags are
      dynamic/static, temporary, deprecated, secured [RFC7217], etc.
      (TODO: Enumeration TBD)

8.11.2.  PROP XXXX: PROP_IPV6_HOST_UCAST_ADDRS

   o  Type: Multiple-Value, Read-Write

   o  Has Item Length Prefix: Yes

   o  Asynchronous Updates: Yes

   o  Required: REQUIRED

   o  Scope: NLI

   o  Item Type: Structure

   o  Post-Reset Value: Empty



Quattlebaum & Woodyatt     Expires May 5, 2018                 [Page 70]

Internet-Draft                 Spinel Core                 November 2017


       0                   1                   2                   3
      0 1 2 3 4 5 6 7 8 9 0 1 2 3 4 5 6 7 8 9 0 1 2 3 4 5 6 7 8 9 0 1
     +-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+
     |                                                               |
     +-                                                             -+
     |                                                               |
     +-                        IPv6 ADDRESS                         -+
     |                                                               |
     +-                                                             -+
     |                                                               |
     +-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+

                  Structure of PROP_IPV6_HOST_UCAST_ADDRS

   Addresses added to this list will be added to PROP_IPV6_UCAST_ADDRS
   as static addresses.

8.11.3.  PROP XXXX: PROP_IPV6_ON_LINK_PREFIXES

   o  Type: Multiple-Value, Read-Only

   o  Has Item Length Prefix: Yes

   o  Asynchronous Updates: Yes

   o  Required: REQUIRED

   o  Scope: NLI

   o  Item Type: Structure

   o  Post-Reset Value: Empty



















Quattlebaum & Woodyatt     Expires May 5, 2018                 [Page 71]

Internet-Draft                 Spinel Core                 November 2017


       0                   1                   2                   3
      0 1 2 3 4 5 6 7 8 9 0 1 2 3 4 5 6 7 8 9 0 1 2 3 4 5 6 7 8 9 0 1
     +-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+
     |                                                               |
     +-                                                             -+
     |                                                               |
     +-                        IPv6 PREFIX                          -+
     |                                                               |
     +-                                                             -+
     |                                                               |
     +-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+
     | PREFIX LENGTH |     SCOPE     |     FLAGS (Little Endian)     |
     +-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+
     |                        VALID LIFETIME (Little Endian)         |
     +-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+
     |                      PREFERRED LIFETIME (Little Endian)       |
     +-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+

                  Structure of PROP_IPV6_ON_LINK_PREFIXES

   This property contains all on-link or on-mesh IPv6 prefixes that are
   being advertised by routers on this NLI's network, including all
   prefixes listed in "PROP_IPV6_HOST_ON_LINK_PREFIXES".

   The AP cannot directly manipulate this property. but it can add new
   on-link or on-mesh prefixes via the "PROP_IPV6_HOST_ON_LINK_PREFIXES"
   property.

8.11.4.  PROP XXXX: PROP_IPV6_HOST_ON_LINK_PREFIXES

   o  Type: Multiple-Value, Read-Write

   o  Has Item Length Prefix: Yes

   o  Asynchronous Updates: Yes

   o  Required: REQUIRED

   o  Scope: NLI

   o  Item Type: Structure

   o  Post-Reset Value: Empty








Quattlebaum & Woodyatt     Expires May 5, 2018                 [Page 72]

Internet-Draft                 Spinel Core                 November 2017


       0                   1                   2                   3
      0 1 2 3 4 5 6 7 8 9 0 1 2 3 4 5 6 7 8 9 0 1 2 3 4 5 6 7 8 9 0 1
     +-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+
     |                                                               |
     +-                                                             -+
     |                                                               |
     +-                        IPv6 PREFIX                          -+
     |                                                               |
     +-                                                             -+
     |                                                               |
     +-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+
     | PREFIX LENGTH |     SCOPE     |     FLAGS (Little Endian)     |
     +-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+
     |                        VALID LIFETIME (Little Endian)         |
     +-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+
     |                      PREFERRED LIFETIME (Little Endian)       |
     +-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+

               Structure of PROP_IPV6_HOST_ON_LINK_PREFIXES

   This property contains all on-link or on-mesh IPv6 prefixes that
   _this host_ is advertising on this NLI's network.

   The AP cannot directly manipulate this property. but it can add new
   on-link or on-mesh prefixes via the "PROP_IPV6_HOST_ON_LINK_PREFIXES"
   property.

   When removing prefixes from the list, only the "IPv6 PREFIX" and
   "PREFIX LENGTH" are required.

   Some network technologies may limit which nodes have permission to
   add items to this list.  In such a case, the following behaviors are
   acceptable (in order of behavior preference):

   1.  The command fails with "STATUS_SECURITY_ERROR".

   2.  The command initially appears to succeed, but a few moments later
       the prefix is asynchronously removed via either
       "CMD_PROP_VALUE_IS" or "CMD_PROP_VALUE_REMOVED".

8.11.5.  PROP XXXX: PROP_IPV6_MCAST_ADDRS

   o  Type: Multiple-Value, Read-Only

   o  Has Item Length Prefix: Yes

   o  Asynchronous Updates: Yes




Quattlebaum & Woodyatt     Expires May 5, 2018                 [Page 73]

Internet-Draft                 Spinel Core                 November 2017


   o  Required: REQUIRED

   o  Scope: NLI

   o  Item Type: IPv6

   o  Post-Reset Value: Implemenation specific

       0                   1                   2                   3
      0 1 2 3 4 5 6 7 8 9 0 1 2 3 4 5 6 7 8 9 0 1 2 3 4 5 6 7 8 9 0 1
     +-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+
     |                                                               |
     +-                                                             -+
     |                                                               |
     +-                        IPv6 ADDRESS                         -+
     |                                                               |
     +-                                                             -+
     |                                                               |
     +-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+

                    Structure of PROP_IPV6_MCAST_ADDRS

   This property contains all IPv6 multicast groups that this NLI is
   currently a member of.  The AP cannot directly manipulate this
   property, but it can add the NLI to new groups via the
   "PROP_IPV6_HOST_MCAST_ADDRS" property.

8.11.6.  PROP XXXX: PROP_IPV6_HOST_MCAST_ADDRS

   o  Type: Multiple-Value, Read-Write

   o  Has Item Length Prefix: Yes

   o  Asynchronous Updates: No

   o  Required: REQUIRED

   o  Scope: NLI

   o  Item Type: IPv6

   o  Post-Reset Value: Empty









Quattlebaum & Woodyatt     Expires May 5, 2018                 [Page 74]

Internet-Draft                 Spinel Core                 November 2017


       0                   1                   2                   3
      0 1 2 3 4 5 6 7 8 9 0 1 2 3 4 5 6 7 8 9 0 1 2 3 4 5 6 7 8 9 0 1
     +-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+
     |                                                               |
     +-                                                             -+
     |                                                               |
     +-                        IPv6 ADDRESS                         -+
     |                                                               |
     +-                                                             -+
     |                                                               |
     +-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+

                  Structure of PROP_IPV6_HOST_MCAST_ADDRS

   This property contains only IPv6 multicast addresses that have been
   added by the AP.  The AP can manipulate this list by setting it
   outright, inserting addresses, or removing addresses.  When attached
   to a network, the addresses in this list are a subset of the
   addresses in "PROP_IPV6_MCAST_ADDRS".

   Note that it is up to the AP to perform any necessary reference
   counting on joined groups.

   Some network technologies may limit which nodes have permission to
   add items to this list.  In such a case, the following behaviors are
   acceptable (in order of behavior preference):

   1.  The command fails with "STATUS_SECURITY_ERROR".

   2.  The command initially appears to succeed, but a few moments later
       the item is asynchronously removed via either "CMD_PROP_VALUE_IS"
       or "CMD_PROP_VALUE_REMOVED".

8.11.7.  PROP XXXX: PROP_IPV6_ROUTES

   o  Type: Multiple-Value, Read-Only

   o  Has Item Length Prefix: Yes

   o  Asynchronous Updates: Yes

   o  Required: REQUIRED

   o  Scope: NLI

   o  Item Type: Structure

   o  Post-Reset Value: Empty



Quattlebaum & Woodyatt     Expires May 5, 2018                 [Page 75]

Internet-Draft                 Spinel Core                 November 2017


       0                   1                   2                   3
      0 1 2 3 4 5 6 7 8 9 0 1 2 3 4 5 6 7 8 9 0 1 2 3 4 5 6 7 8 9 0 1
     +-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+
     |                                                               |
     +-                                                             -+
     |                                                               |
     +-                        IPv6 PREFIX                          -+
     |                                                               |
     +-                                                             -+
     |                                                               |
     +-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+
     | PREFIX LENGTH |    (TODO: Likely needs more stuff here...)
     +-+-+-+-+-+-+-+-+

                       Structure of PROP_IPV6_ROUTES

   This property contains _all_ prefixes that can be reached via this
   NLI, *both off-link and on-link*. This list MUST NOT include any
   prefixes listed in "PROP_IPV6_HOST_ROUTES" *UNLESS* that route is
   being advertised by some other node.

8.11.8.  PROP XXXX: PROP_IPV6_HOST_ROUTES

   o  Type: Multiple-Value, Read-Write

   o  Has Item Length Prefix: Yes

   o  Asynchronous Updates: Yes

   o  Required: REQUIRED

   o  Scope: NLI

   o  Item Type: Structure

   o  Post-Reset Value: Empty















Quattlebaum & Woodyatt     Expires May 5, 2018                 [Page 76]

Internet-Draft                 Spinel Core                 November 2017


       0                   1                   2                   3
      0 1 2 3 4 5 6 7 8 9 0 1 2 3 4 5 6 7 8 9 0 1 2 3 4 5 6 7 8 9 0 1
     +-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+
     |                                                               |
     +-                                                             -+
     |                                                               |
     +-                        IPv6 PREFIX                          -+
     |                                                               |
     +-                                                             -+
     |                                                               |
     +-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+
     | PREFIX LENGTH |    (TODO: Likely needs more stuff here...)
     +-+-+-+-+-+-+-+-+

                    Structure of PROP_IPV6_HOST_ROUTES

   This property contains all prefixes that the AP is willing to route
   traffic to on behalf of other nodes the current network.  This
   property MUST NOT be populated automatically by the NCP.  Routes
   added to this property will be advertised to other nodes on the
   network.

   Some network technologies may limit which nodes have permission to
   add items to this list.  In such a case, the following behaviors are
   acceptable (in order of behavior preference):

   1.  The command fails with "STATUS_SECURITY_ERROR".

   2.  The command initially appears to succeed, but a few moments later
       the item is asynchronously removed via either "CMD_PROP_VALUE_IS"
       or "CMD_PROP_VALUE_REMOVED".

8.12.  Debug Properties

8.12.1.  PROP 16384: PROP_DEBUG_TEST_ASSERT

   o  Type: Single-Value, Read-Only

   o  Asynchronous Updates: No

   o  Required: OPTIONAL

   o  Scope: NCP

   o  Post-Reset Value: Unspecified

   Reading this property will cause an assert on the NCP.  This is
   intended for testing the assert functionality of underlying platform/



Quattlebaum & Woodyatt     Expires May 5, 2018                 [Page 77]

Internet-Draft                 Spinel Core                 November 2017


   NCP.  Assert should ideally cause the NCP to reset, but if "assert"
   is not supported or disabled boolean value of "false" is returned in
   response.

8.12.2.  PROP 16385: PROP_DEBUG_NCP_LOG_LEVEL

   o  Type: Single-Value, Read-Write

   o  Asynchronous Updates: No

   o  Required: OPTIONAL

   o  Scope: NCP

   o  Value Type: UINT8

   o  Post-Reset Value: Implementation Specific

   Provides access to the NCP log level.  Standard log level codes,
   which are derived from [RFC5424], are shown below:

   o  0: Emergency (emerg).

   o  1: Alert (alert).

   o  2: Critical (crit).

   o  3: Error (err).

   o  4: Warning (warn).

   o  5: Notice (notice).

   o  6: Information (info).

   o  7: Debug (debug).

   If the NCP supports dynamic log level control, setting this property
   changes the log level accordingly.  Getting the value returns the
   current log level.  If the dynamic log level control is not
   supported, setting this property returns a "PROP_LAST_STATUS" with
   "STATUS_INVALID_COMMAND_FOR_PROP".

9.  Security Considerations

   EDITOR: Insert verbiage here conforming to RFC Editor guidelines.





Quattlebaum & Woodyatt     Expires May 5, 2018                 [Page 78]

Internet-Draft                 Spinel Core                 November 2017


9.1.  Network Name Normalization

   TODO: Discuss UTF8 verification and normalization considerations
   related to "PROP_NET_NETWORK_NAME".

9.2.  Raw Application Access

   Spinel MAY be used as an API boundary for allowing processes to
   configure the NCP.  However, such a system MUST NOT give unprivileged
   processess the ability to send or receive arbitrary command frames to
   the NCP.  Only the specific commands and properties that are required
   should be allowed to be passed, and then only after being checked for
   proper format.

10.  IANA Considerations

   EDITOR: insert verbiage here: registry creation forms, et cetera.

11.  References

11.1.  Normative References

   [RFC2119]  Bradner, S., "Key words for use in RFCs to Indicate
              Requirement Levels", BCP 14, RFC 2119,
              DOI 10.17487/RFC2119, March 1997, <https://www.rfc-
              editor.org/info/rfc2119>.

   [RFC8200]  Deering, S. and R. Hinden, "Internet Protocol, Version 6
              (IPv6) Specification", STD 86, RFC 8200,
              DOI 10.17487/RFC8200, July 2017, <https://www.rfc-
              editor.org/info/rfc8200>.

11.2.  Informative References

   [I-D.bormann-t2trg-slipmux]
              Bormann, C. and T. Kaupat, "Slipmux: Using an UART
              interface for diagnostics, configuration, and packet
              transfer", draft-bormann-t2trg-slipmux-01 (work in
              progress), July 2017.

   [RFC1055]  Romkey, J., "Nonstandard for transmission of IP datagrams
              over serial lines: SLIP", STD 47, RFC 1055,
              DOI 10.17487/RFC1055, June 1988, <https://www.rfc-
              editor.org/info/rfc1055>.

   [RFC2360]  Scott, G., "Guide for Internet Standards Writers", BCP 22,
              RFC 2360, DOI 10.17487/RFC2360, June 1998,
              <https://www.rfc-editor.org/info/rfc2360>.



Quattlebaum & Woodyatt     Expires May 5, 2018                 [Page 79]

Internet-Draft                 Spinel Core                 November 2017


   [RFC4944]  Montenegro, G., Kushalnagar, N., Hui, J., and D. Culler,
              "Transmission of IPv6 Packets over IEEE 802.15.4
              Networks", RFC 4944, DOI 10.17487/RFC4944, September 2007,
              <https://www.rfc-editor.org/info/rfc4944>.

   [RFC5424]  Gerhards, R., "The Syslog Protocol", RFC 5424,
              DOI 10.17487/RFC5424, March 2009, <https://www.rfc-
              editor.org/info/rfc5424>.

   [RFC7217]  Gont, F., "A Method for Generating Semantically Opaque
              Interface Identifiers with IPv6 Stateless Address
              Autoconfiguration (SLAAC)", RFC 7217,
              DOI 10.17487/RFC7217, April 2014, <https://www.rfc-
              editor.org/info/rfc7217>.

11.3.  URIs

   [1] https://www.w3.org/TR/exi/#encodingUnsignedInteger

   [2] http://reveng.sourceforge.net/crc-catalogue/16.htm#crc.cat.kermit

   [3] https://github.com/miekg/mmark

   [4] http://xml2rfc.ietf.org/

Appendix A.  Example Sessions

A.1.  NCP Initialization

   [CREF10]

   Check the protocol version to see if it is supported:

   o  CMD_VALUE_GET:PROP_PROTOCOL_VERSION

   o  CMD_VALUE_IS:PROP_PROTOCOL_VERSION

   Check the NCP version to see if a firmware update may be necessary:

   o  CMD_VALUE_GET:PROP_NCP_VERSION

   o  CMD_VALUE_IS:PROP_NCP_VERSION

   Check interface type to make sure that it is what we expect:

   o  CMD_VALUE_GET:PROP_INTERFACE_TYPE

   o  CMD_VALUE_IS:PROP_INTERFACE_TYPE



Quattlebaum & Woodyatt     Expires May 5, 2018                 [Page 80]

Internet-Draft                 Spinel Core                 November 2017


   If the AP supports using vendor-specific commands, the vendor should
   be verified before using them:

   o  CMD_VALUE_GET:PROP_VENDOR_ID

   o  CMD_VALUE_IS:PROP_VENDOR_ID

   Fetch the capability list so that we know what features this NCP
   supports:

   o  CMD_VALUE_GET:PROP_CAPS

   o  CMD_VALUE_IS:PROP_CAPS

   If the NCP supports CAP_NET_SAVE, then we go ahead and recall the
   network:

   o  CMD_NET_RECALL

A.2.  Attaching to a network

   [CREF11]

   We make the assumption that the NCP is already associated with a
   network at physical and media access layers.  The core layer steps
   proceed after the initial phase of initializing the specific network
   layer stack.

   Bring the network interface up:

   o  CMD_VALUE_SET:PROP_NET_IF_UP:TRUE

   o  CMD_VALUE_IS:PROP_NET_IF_UP:TRUE

   Bring the routing stack up:

   o  CMD_VALUE_SET:PROP_NET_STACK_UP:TRUE

   o  CMD_VALUE_IS:PROP_NET_STACK_UP:TRUE

A.3.  Detaching from a network

   This is the reverse of the previous case.

   Bring the routing stack up:

   o  CMD_VALUE_SET:PROP_NET_STACK_UP:FALSE




Quattlebaum & Woodyatt     Expires May 5, 2018                 [Page 81]

Internet-Draft                 Spinel Core                 November 2017


   o  CMD_VALUE_IS:PROP_NET_STACK_UP:FALSE

   Bring the network interface up:

   o  CMD_VALUE_SET:PROP_NET_IF_UP:FALSE

   o  CMD_VALUE_IS:PROP_NET_IF_UP:FALSE

A.4.  Attaching to a saved network

   [CREF12]

   Recall the saved network if you haven't already done so:

   o  CMD_NET_RECALL

   Bring the network interface up:

   o  CMD_VALUE_SET:PROP_NET_IF_UP:TRUE

   o  CMD_VALUE_IS:PROP_NET_IF_UP:TRUE

   Bring the routing stack up:

   o  CMD_VALUE_SET:PROP_NET_STACK_UP:TRUE

   o  CMD_VALUE_IS:PROP_NET_STACK_UP:TRUE

A.5.  NCP Software Reset

   [CREF13]

   o  CMD_RESET

   o  CMD_VALUE_IS:PROP_LAST_STATUS:STATUS_RESET_SOFTWARE

   Then jump to Appendix A.1.

Appendix B.  Recommended Framing Protocols

   Since this NCP protocol is defined independently of the physical
   transport or framing, any number of transports and framing protocols
   could be used successfully.  However, in the interests of
   compatibility, this document provides some recommendations.







Quattlebaum & Woodyatt     Expires May 5, 2018                 [Page 82]

Internet-Draft                 Spinel Core                 November 2017


B.1.  UART Recommendations

   The recommended default UART settings are:

   o  Bit rate: 115200

   o  Start bits: 1

   o  Data bits: 8

   o  Stop bits: 1

   o  Parity: None

   o  Flow Control: Hardware

   These values may be adjusted depending on the individual needs of the
   application or product, but some sort of flow control MUST be used.
   Hardware flow control is preferred over software flow control.  In
   the absence of hardware flow control, software flow control (XON/
   XOFF) MUST be used instead.

   We also *RECOMMEND* an Arduino-style hardware reset, where the DTR
   signal is coupled to the "RES" pin through a 0.01 micro-Farad
   capacitor.  This causes the NCP to automatically reset whenever the
   serial port is opened.  At the very least we *RECOMMEND* dedicating
   one of your AP host pins to controlling the "RES" pin on the NCP, so
   that you can easily perform a hardware reset if necessary.

B.1.1.  UART Bit Rate Detection

   When using a UART, the issue of an appropriate bit rate must be
   considered. 115200 bits/s is the conventional baud rate for many
   serial peripherals.  This rate, however, is slower than the
   theoretical maximum bitrate of many relevant network interfaces, e.g.
   the 802.15.4 2.4GHz PHY (250kbit).  In most circumstances this
   mismatch is not significant because the overall bitrate will be much
   lower than either of these rates, but there are circumstances where a
   faster UART bitrate is desirable.  Thus, this document proposes a
   simple bitrate detection scheme that can be employed by the AP to
   detect when the attached NCP is initially running at a higher
   bitrate.

   The algorithm is to send successive NOOP commands to the NCP at
   increasing bitrates.  When a valid "CMD_LAST_STATUS" response has
   been received, we have identified the correct bitrate.





Quattlebaum & Woodyatt     Expires May 5, 2018                 [Page 83]

Internet-Draft                 Spinel Core                 November 2017


   In order to limit the time spent hunting for the appropriate bitrate,
   we RECOMMEND that only the following bitrates be checked:

   o  115200

   o  230400

   o  1000000 (1Mbit)

   The bitrate MAY also be changed programmatically by adjusting
   "PROP_UART_BITRATE", if implemented.

   (TODO: Define PROP_UART_BITRATE)

B.1.2.  HDLC-Lite

   _HDLC-Lite_ is the recommended framing protocol for transmitting
   Spinel frames over a UART.  HDLC-Lite consists of only the framing,
   escaping, and CRC parts of the larger HDLC protocol---all other parts
   of HDLC are omitted.  This protocol was chosen because it works well
   with software flow control and is widely implemented.

   To transmit a frame with HDLC-lite, the 16-bit CRC must first be
   appended to the frame.  The CRC function is defined to be CRC-16/
   CCITT, otherwise known as the KERMIT CRC [2].

   Individual frames MUST terminated with a frame delimiter byte called
   the 'flag' byte ("0x7E").

   The following bytes values are considered _special_ and should be
   escaped when present in data frames:

                  +------------+------------------------+
                  | Byte Value | Description            |
                  +------------+------------------------+
                  | 0x7E       | Frame Delimiter (Flag) |
                  | 0x7D       | Escape Byte            |
                  | 0x11       | XON                    |
                  | 0x13       | XOFF                   |
                  | 0xF8       | Vendor-Specific        |
                  +------------+------------------------+

   When present in a data frame, these byte values are escaped by
   prepending the escape byte ("0x7D") and XORing the value with "0x20".

   When receiving a frame, the CRC must be verified after the frame is
   unescaped.  If the CRC value does not match what is calculated for
   the frame data, the frame MUST be discarded.  The implementation MAY



Quattlebaum & Woodyatt     Expires May 5, 2018                 [Page 84]

Internet-Draft                 Spinel Core                 November 2017


   indicate the failure to higher levels to handle as they see fit, but
   MUST NOT attempt to process the deceived frame.

   Consecutive flag bytes are entirely legal and MUST NOT be treated as
   a framing error.  Consecutive flag bytes MAY be used as a way to wake
   up a sleeping NCP.

   When first establishing a connection to the NCP, it is customary to
   send one or more flag bytes to ensure that any previously received
   data is discarded.

B.1.2.1.  Reliability Discussion

   All Spinel framing layers must make guarantees for reliability and
   in-order delivery.  In this case, we are assuming that the
   reliability of HDLC-Lite is adequarely implied by both of the two
   usage scenarios we considered most likely:

   1.  That the NCP and AP are attached to the same physical circuit
       board, connected via short traces routed over ground planes, with
       the AP and NCP being an inch or two apart at most.

   2.  That the NCP is connected to the AP as a USB dongle, presenting
       to the AP as a virtual serial port.

   In both of these cases, the high inherent reliability of the
   underlying hardware implies that additional reliability guarantees
   are unnecessary under most circumstances, so we have ommitted them
   from this particular framing recommendation.  However, if the UART
   connection reliability is suspect (due to noise or other factors),
   then a more complex framing mechanism may be required.

B.2.  SPI Recommendations

   We *RECOMMEND* the use of the following standard SPI signals:

   o  "CS": (AP-to-NCP) Chip Select

   o  "CLK": (AP-to-NCP) Clock

   o  "MOSI": Master-Output/Slave-Input

   o  "MISO": Master-Input/Slave-Output

   o  "INT": (NCP-to-AP) Host Interrupt

   o  "RES": (AP-to-NCP) NCP Hardware Reset




Quattlebaum & Woodyatt     Expires May 5, 2018                 [Page 85]

Internet-Draft                 Spinel Core                 November 2017


   The "INT" signal is used by the NCP to indicate to the AP that the
   NCP has frames pending to send to it.  When asserted, the AP SHOULD
   initiate a SPI transaction in a timely manner.

   We RECOMMEND the following SPI properties:

   o  "CS" is active low.

   o  "CLK" is active high.

   o  "CLK" speed is larger than 500 kHz.

   o  Data is valid on leading edge of "CLK".

   o  Data is sent in multiples of 8-bits (bytes).

   o  Bytes are sent most-significant bit first.

   This recommended configuration may be adjusted depending on the
   individual needs of the application or product.

B.2.1.  SPI Framing Protocol

   Each SPI frame starts with a 5-byte frame header:

               0                   1                   2
              0 1 2 3 4 5 6 7 8 9 0 1 2 3 4 5 6 7 8 9 0 1 2 3
             +-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-|
             |      HDR      |   RECV_LEN (Little Endian)    |
             +-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+
             |   DATA_LEN (Little Endian)    |
             +-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+

                        Diagram of SPI frame header

   "HDR" : The first byte is the header byte (defined below)

   RECV_LEN
      The second and third bytes indicate the largest frame size that
      that device is ready to receive.  If zero, then the other device
      must not send any data.  (Little endian)

   DATA_LEN
      The fourth and fifth bytes indicate the size of the pending data
      frame to be sent to the other device.  If this value is equal-to
      or less-than the number of bytes that the other device is willing
      to receive, then the data of the frame is immediately after the
      header.  (Little Endian)



Quattlebaum & Woodyatt     Expires May 5, 2018                 [Page 86]

Internet-Draft                 Spinel Core                 November 2017


   The "HDR" byte is defined as:

                       0   1   2   3   4   5   6   7
                     +---+---+---+---+---+---+---+---+
                     |RST|CRC|CCF|  RESERVED |PATTERN|
                     +---+---+---+---+---+---+---+---+

   RST
      This bit is set when that device has been reset since the last
      time "CS" was asserted.

   CRC
      This bit is set when that device supports writing a 16-bit CRC at
      the end of the data.  The CRC length is MUST NOT included in
      DATA_LEN.

   CCF
      "CRC Check Failure".  Set if the CRC check on the last received
      frame failed, cleared to zero otherwise.  This bit is only used if
      both sides support CRC.

   RESERVED
      These bits are all reserved for future use.  They MUST be cleared
      to zero and MUST be ignored if set.

   PATTERN
      These bits are set to a fixed value to help distinguish valid SPI
      frames from garbage (by explicitly making "0xFF" and "0x00"
      invalid values).  Bit 6 MUST be set to be one and bit 7 MUST be
      cleared (0).  A frame received that has any other values for these
      bits MUST be dropped.

   Prior to a sending or receiving a frame, the master MAY send a 5-byte
   frame with zeros for both the max receive frame size and the the
   contained frame length.  This will induce the slave device to
   indicate the length of the frame it wants to send (if any) and
   indicate the largest frame it is capable of receiving at the moment.
   This allows the master to calculate the size of the next transaction.
   Alternatively, if the master has a frame to send it can just go ahead
   and send a frame of that length and determine if the frame was
   accepted by checking that the "RECV_LEN" from the slave frame is
   larger than the frame the master just tried to send.  If the
   "RECV_LEN" is smaller then the frame wasn't accepted and will need to
   be transmitted again.

   This protocol can be used either unidirectionally or bidirectionally,
   determined by the behavior of the master and the slave.




Quattlebaum & Woodyatt     Expires May 5, 2018                 [Page 87]

Internet-Draft                 Spinel Core                 November 2017


   If the the master notices "PATTERN" is not set correctly, the master
   should consider the transaction to have failed and try again after 10
   milliseconds, retrying up to 200 times.  After unsuccessfully trying
   200 times in a row, the master MAY take appropriate remedial action
   (like a NCP hardware reset, or indicating a communication failure to
   a user interface).

   At the end of the data of a frame is an optional 16-bit CRC, support
   for which is indicated by the "CRC" bit of the "HDR" byte being set.
   If these bits are set for both the master and slave frames, then CRC
   checking is enabled on both sides, effectively requiring that frame
   sizes be two bytes longer than would be otherwise required.  The CRC
   is calculated using the same mechanism used for the CRC calculation
   in HDLC-Lite (See Appendix B.1.2).  When both of the "CRC" bits are
   set, both sides must verify that the "CRC" is valid before accepting
   the frame.  If not enough bytes were clocked out for the CRC to be
   read, then the frame must be ignored.  If enough bytes were clocked
   out to perform a CRC check, but the CRC check fails, then the frame
   must be rejected and the "CRC_FAIL" bit on the next frame (and ONLY
   the next frame) MUST be set.

B.2.1.1.  Reliability Discussion

   TODO: Write me!

B.3.  I2C Recommendations

   TBD

   [CREF14]

B.4.  Native USB Recommendations

   TBD

   [CREF15]

Appendix C.  Test Vectors

C.1.  Test Vector: Packed Unsigned Integer











Quattlebaum & Woodyatt     Expires May 5, 2018                 [Page 88]

Internet-Draft                 Spinel Core                 November 2017


                 +---------------+----------------------+
                 | Decimal Value | Packet Byte Encoding |
                 +---------------+----------------------+
                 |             0 | "00"                 |
                 |             1 | "01"                 |
                 |           127 | "7F"                 |
                 |           128 | "80 01"              |
                 |           129 | "81 01"              |
                 |         1,337 | "B9 0A"              |
                 |        16,383 | "FF 7F"              |
                 |        16,384 | "80 80 01"           |
                 |        16,385 | "81 80 01"           |
                 |     2,097,151 | "FF FF 7F"           |
                 +---------------+----------------------+

   [CREF16]

C.2.  Test Vector: Reset Command

   o  NLI: 0

   o  TID: 0

   o  CMD: 1 ("CMD_RESET")

   Frame:

                                   80 01

C.3.  Test Vector: Reset Notification

   o  NLI: 0

   o  TID: 0

   o  CMD: 6 ("CMD_VALUE_IS")

   o  PROP: 0 ("PROP_LAST_STATUS")

   o  VALUE: 114 ("STATUS_RESET_SOFTWARE")

   Frame:

                                80 06 00 72







Quattlebaum & Woodyatt     Expires May 5, 2018                 [Page 89]

Internet-Draft                 Spinel Core                 November 2017


C.4.  Test Vector: Inbound IPv6 Packet

   CMD_VALUE_IS(PROP_STREAM_NET)

   [CREF17]

C.5.  Test Vector: Outbound IPv6 Packet

   CMD_VALUE_SET(PROP_STREAM_NET)

   [CREF18]

Appendix D.  Comparison with other protocols

   The problem of needing to manage a connectivity peripheral attached
   to a general-purpose computer is not new.  The Hayes Command Set
   (TODO:CITE), for example, has been in use since 1981 and quickly
   became a ubiquitous de-facto standard for configuring dial-up modems
   and other similar peripherals.  In more recent times, the
   standardized Bluetooth HCI protocol (TODO:CITE) helps to ensure plug-
   and-play interoperability between the operating system and the
   Bluetooth peripheral.

   IEEE 802.15.4 (TODO:CITE) based low-power wireless networks are
   quickly becoming ubiquitous, and with the introduction of 6LoWPAN
   ([RFC4944]), IPv6 connectivity is now possible on these networks.
   6LoWPAN-based network technologies such as Thread(R) and ZigBee(R) IP
   additionally provide additional features such as network security,
   mesh-networking, and ultra-low-power operation.  To fully realize
   low-power operation, a great deal of the IPv6 network and routing
   stack needs to be implemented directly on the connectivity
   peripheral.  With that, we again find ourselves with a question of
   how best to communicate with and manage this new class of peripheral.
   There have been a wide range of solutions to this problem, each with
   significant drawbacks:

   o  Using SLIP ([RFC1055])

      *  UART-only

      *  Management must be handled out-of-band

      *  Widely supported

   o  Using slipmux ([I-D.bormann-t2trg-slipmux])

      *  UART-only




Quattlebaum & Woodyatt     Expires May 5, 2018                 [Page 90]

Internet-Draft                 Spinel Core                 November 2017


      *  Management in-band, but is managed using CoAP.  Exact details
         of management protocol are not specified.

      *  Backward compatible with existing SLIP implementations.

   o  USB CDC-ECM for data, using some other USB protocol for management
      (TODO:CITE)

      *  USB-only

      *  Somewhat Plug-and-play (appears as an ethernet device)

      *  Mismatched network layer: CDC-ECM is layer-2, whereas IPv6 is
         layer-3.  This leads to the requirement of clever work-arounds
         that can't satisfactorily handle all cases.

      *  Bespoke, text-based management protocol

   o  Proprietary protocols

      *  Often covered by NDA

      *  Not plug-and-play, can't easily swap parts with a different
         vendor

      *  Can change often and without warning

   Standardized interfaces to specific classes of connectivity
   peripherals significantly reduces the implementation and deployment
   burdens.  Bluetooth, for example, has standardized on the Bluetooth
   HCI, which allows plug-and-play interoperability between Bluetooth
   peripherals.  Similar to Bluetooth HCI, Spinel is frame-based and
   doesn't mandate the exact mechanism used to exchange frames between
   the peripheral and the host.  It does, however, make recommendations,
   and we do likewise in Appendix B.

   Note that, unlike PPP or SLIP (where the cable is the network medium
   and the serial port of the network interface), Spinel is not a link-
   layer network protocol between machines: it is an extension of the
   IPv6 stack into an external network co-processor.  Spinel isn't used
   for directly communicating with another independent host: it is
   instead used for communicating with an intermediary (the NCP) who
   acts on the behalf of the application processor.  The network
   interface doesn't end at the serial port, rather it extends into the
   NCP---which might not have it's own independent IPv6 address.






Quattlebaum & Woodyatt     Expires May 5, 2018                 [Page 91]

Internet-Draft                 Spinel Core                 November 2017


Appendix E.  Acknowledgments

   Thread is a registered trademark of The Thread Group, Inc.

   Special thanks to Nick Banks, Jonathan Hui, Abtin Keshavarzian, Yakun
   Xu, Piotr Szkotak, Arjuna Sivasithambaresan and Martin Turon for
   their substantial contributions and feedback related to this
   document.

   This document was prepared using mmark [3] by (Miek Gieben) and
   xml2rfc (version 2) [4].

Editorial Comments

[CREF1] RQ: Alphabetize terminology before finalization.

[CREF2] JW: I have no idea how to write the IANA registry creation text
        for this. --

[CREF3] RQ: Maybe we should switch this over to be a string instead? --

[CREF4] JW: TODO: We should consider reversing the numbering here so
        that 0 is `POWER_STATE_ONLINE`. We may also want to include some
        extra values between the defined values for future expansion, so
        that we can preserve the ordered relationship.  --

[CREF5] JW: EDITOR: We should consider reversing the numbering here so
        that 0 is `POWER_STATE_ONLINE`. We may also want to include some
        additional reserved values between the defined values for future
        expansion, so that we can preserve the ordered relationship.
        See the similar editorial comment at (#prop-power-state).  --

[CREF6] RQ: The justification for the above behavior is to attempt to
        avoid possible future interop problems by explicitly making sure
        that unknown properties are ignored.  Since unknown properties
        will obviously not be generating unsolicited updates, it seems
        fairly harmless.  An implementation may print out a warning to
        the debug stream.  Note that the error is still detectable: If
        you VALUE\_SET unsupported properties, the resulting VALUE\_IS
        would contain only the supported properties of that set(since
        the unsupported properties would be ignored).  If an
        implementation cares that much about getting this right then it
        needs to make sure that it checks PROP\_UNSOL\_UPDATE\_LIST
        first.  --

[CREF7] RQ: Break PROP_MAC_15_4_LADDR out into an 802.15.4-specific
        section --




Quattlebaum & Woodyatt     Expires May 5, 2018                 [Page 92]

Internet-Draft                 Spinel Core                 November 2017


[CREF8] RQ: Break PROP_MAC_15_4_SADDR out into an 802.15.4-specific
        section --

[CREF9] RQ: Break PROP_MAC_15_4_PANID out into an 802.15.4-specific
        section --

[CREF10] RQ: FIXME: This example session is incomplete.

[CREF11] RQ: FIXME: This example session is incomplete.

[CREF12] RQ: FIXME: This example session is incomplete.

[CREF13] RQ: FIXME: This example session is incomplete.

[CREF14] RQ: It may make sense to have a look at what Bluetooth HCI is
         doing for native I2C framing and go with that.

[CREF15] RQ: It may make sense to have a look at what Bluetooth HCI is
         doing for native USB framing and go with that.

[CREF16] RQ: The PUI test-vector encodings need to be verified.

[CREF17] RQ: FIXME: This test vector is incomplete.

[CREF18] RQ: FIXME: This test vector is incomplete.

Authors' Addresses

   Robert S. Quattlebaum
   Nest Labs, Inc.
   3400 Hillview Ave.
   Palo Alto, California  94304
   USA

   Email: rquattle@nestlabs.com


   James Woodyatt (editor)
   Nest Labs, Inc.
   3400 Hillview Ave.
   Palo Alto, California  94304
   USA

   Email: jhw@nestlabs.com







Quattlebaum & Woodyatt     Expires May 5, 2018                 [Page 93]
